/*
 * Generated by Resin-3.0.14 (built Tue, 05 Jul 2005 11:03:36 PDT)
 */

package _xsl._file_23a._d_23a._jose._work._xsl;

import java.io.*;
import java.util.*;
import org.w3c.dom.*;
import org.xml.sax.*;
import com.caucho.util.*;
import com.caucho.xml.*;
import com.caucho.xpath.*;
import com.caucho.xpath.expr.*;
import com.caucho.xpath.pattern.*;
import com.caucho.xsl.*;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;

public class _pdf__xsl extends JavaStylesheet {
  private StylesheetEnv stylesheets[];

  // 'head'
// pdf_header.xsl:11
  private void _xsl_template_head(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[0]);
    _exprs[23].addParam(env, "style", node, env);
    _exprs[24].addParam(env, "color", node, env);
    out.setLocation("file:/D:/jose/work/xsl/pdf_header.xsl", "pdf_header.xsl", 16);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "table", "fo:table");
    out.attribute("table-layout", "fixed");
    out.attribute("width", "100%");
    out.setLocation("file:/D:/jose/work/xsl/pdf_header.xsl", "pdf_header.xsl", 17);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "table-column", "fo:table-column");
    out.popElement();
    out.setLocation("file:/D:/jose/work/xsl/pdf_header.xsl", "pdf_header.xsl", 18);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "table-body", "fo:table-body");
    out.setLocation("file:/D:/jose/work/xsl/pdf_header.xsl", "pdf_header.xsl", 18);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "table-row", "fo:table-row");
    out.attribute("keep-together", "always");
    out.setLocation("file:/D:/jose/work/xsl/pdf_header.xsl", "pdf_header.xsl", 18);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "table-cell", "fo:table-cell");
    out.setLocation("file:/D:/jose/work/xsl/pdf_header.xsl", "pdf_header.xsl", 20);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "block", "fo:block");
    XMLWriter _xsl_attr_0 = out.pushAttribute("font-family", _namespaces[0]);
    out.valueOf(_exprs[25].evalObject(node, env));
    out.popAttribute(_xsl_attr_0);
    XMLWriter _xsl_attr_1 = out.pushAttribute("font-size", _namespaces[0]);
    out.valueOf(_exprs[26].evalObject(node, env));
    out.print("pt");
    out.popAttribute(_xsl_attr_1);
    if (_exprs[27].evalBoolean(node, env)) {
      XMLWriter _xsl_attr_2 = out.pushAttribute("color", _namespaces[0]);
      out.print("black");
      out.popAttribute(_xsl_attr_2);
    }
    else {
      XMLWriter _xsl_attr_3 = out.pushAttribute("color", _namespaces[0]);
      out.valueOf(_exprs[28].evalObject(node, env));
      out.popAttribute(_xsl_attr_3);
    }
    if (_exprs[29].evalBoolean(node, env)) {
      XMLWriter _xsl_attr_4 = out.pushAttribute("font-weight", _namespaces[0]);
      out.print("bold");
      out.popAttribute(_xsl_attr_4);
    }
    else {
      XMLWriter _xsl_attr_5 = out.pushAttribute("font-weight", _namespaces[0]);
      out.print("normal");
      out.popAttribute(_xsl_attr_5);
    }
    if (_exprs[30].evalBoolean(node, env)) {
      XMLWriter _xsl_attr_6 = out.pushAttribute("font-style", _namespaces[0]);
      out.print("italic");
      out.popAttribute(_xsl_attr_6);
    }
    else {
      XMLWriter _xsl_attr_7 = out.pushAttribute("font-style", _namespaces[0]);
      out.print("normal");
      out.popAttribute(_xsl_attr_7);
    }
    {
      Env _xsl_arg1 = XPath.createCall(env);
      _exprs[31].addVar(_xsl_arg1, "head", node, env);
      _xsl_macro_first_ncheader_ncline(out, node, _xsl_arg1);
      _xsl_arg1.free();
    }
    {
      Env _xsl_arg1 = XPath.createCall(env);
      _exprs[31].addVar(_xsl_arg1, "head", node, env);
      _xsl_macro_second_ncheader_ncline(out, node, _xsl_arg1);
      _xsl_arg1.free();
    }
    {
      Env _xsl_arg1 = XPath.createCall(env);
      _exprs[31].addVar(_xsl_arg1, "head", node, env);
      _xsl_macro_third_ncheader_ncline(out, node, _xsl_arg1);
      _xsl_arg1.free();
    }
    out.popElement();
    out.popElement();
    out.popElement();
    out.popElement();
    out.popElement();
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }

  void _xsl_macro_first_ncheader_ncline(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    _exprs[32].addParam(env, "Event", node, env);
    _exprs[33].addParam(env, "EventDate", node, env);
    _exprs[34].addParam(env, "Site", node, env);
    _exprs[35].addParam(env, "Date", node, env);
    _exprs[36].addParam(env, "Round", node, env);
    _exprs[37].addParam(env, "Board", node, env);
    _exprs[38].addParam(env, "event_style", node, env);
    _exprs[39].addParam(env, "site_style", node, env);
    _exprs[40].addParam(env, "date_style", node, env);
    _exprs[41].addParam(env, "round_style", node, env);
    _exprs[42].addParam(env, "event_color", node, env);
    _exprs[43].addParam(env, "site_color", node, env);
    _exprs[44].addParam(env, "date_color", node, env);
    _exprs[45].addParam(env, "round_color", node, env);
    _exprs[46].addParam(env, "isEvent", node, env);
    _exprs[47].addParam(env, "isEventDate", node, env);
    _exprs[48].addParam(env, "isSite", node, env);
    _exprs[49].addParam(env, "isDate", node, env);
    _exprs[50].addParam(env, "isRound", node, env);
    _exprs[51].addParam(env, "isBoard", node, env);
    if (_exprs[0].evalBoolean(node, env)) {
      out.setLocation("file:/D:/jose/work/xsl/pdf_header.xsl", "pdf_header.xsl", 87);
      out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "block", "fo:block");
      if (_exprs[1].evalBoolean(node, env)) {
        out.setLocation("file:/D:/jose/work/xsl/pdf_header.xsl", "pdf_header.xsl", 90);
        out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
        XMLWriter _xsl_attr_8 = out.pushAttribute("font-family", _namespaces[0]);
        out.valueOf(_exprs[52].evalObject(node, env));
        out.popAttribute(_xsl_attr_8);
        XMLWriter _xsl_attr_9 = out.pushAttribute("font-size", _namespaces[0]);
        out.valueOf(_exprs[53].evalObject(node, env));
        out.print("pt");
        out.popAttribute(_xsl_attr_9);
        if (_exprs[54].evalBoolean(node, env)) {
          XMLWriter _xsl_attr_10 = out.pushAttribute("color", _namespaces[0]);
          out.print("black");
          out.popAttribute(_xsl_attr_10);
        }
        else {
          XMLWriter _xsl_attr_11 = out.pushAttribute("color", _namespaces[0]);
          out.valueOf(_exprs[55].evalObject(node, env));
          out.popAttribute(_xsl_attr_11);
        }
        if (_exprs[56].evalBoolean(node, env)) {
          XMLWriter _xsl_attr_12 = out.pushAttribute("font-weight", _namespaces[0]);
          out.print("bold");
          out.popAttribute(_xsl_attr_12);
        }
        else {
          XMLWriter _xsl_attr_13 = out.pushAttribute("font-weight", _namespaces[0]);
          out.print("normal");
          out.popAttribute(_xsl_attr_13);
        }
        if (_exprs[57].evalBoolean(node, env)) {
          XMLWriter _xsl_attr_14 = out.pushAttribute("font-style", _namespaces[0]);
          out.print("italic");
          out.popAttribute(_xsl_attr_14);
        }
        else {
          XMLWriter _xsl_attr_15 = out.pushAttribute("font-style", _namespaces[0]);
          out.print("normal");
          out.popAttribute(_xsl_attr_15);
        }
        out.valueOf(_exprs[58].evalObject(node, env));
        if (_exprs[2].evalBoolean(node, env)) {
          out.print(" (");
          out.valueOf(_exprs[59].evalObject(node, env));
          out.print(")");
        }
        if (_exprs[3].evalBoolean(node, env)) {
          out.print(", ");
        }
        out.popElement();
      }
      if (_exprs[4].evalBoolean(node, env)) {
        out.setLocation("file:/D:/jose/work/xsl/pdf_header.xsl", "pdf_header.xsl", 121);
        out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
        XMLWriter _xsl_attr_16 = out.pushAttribute("font-family", _namespaces[0]);
        out.valueOf(_exprs[60].evalObject(node, env));
        out.popAttribute(_xsl_attr_16);
        XMLWriter _xsl_attr_17 = out.pushAttribute("font-size", _namespaces[0]);
        out.valueOf(_exprs[61].evalObject(node, env));
        out.print("pt");
        out.popAttribute(_xsl_attr_17);
        if (_exprs[62].evalBoolean(node, env)) {
          XMLWriter _xsl_attr_18 = out.pushAttribute("color", _namespaces[0]);
          out.print("black");
          out.popAttribute(_xsl_attr_18);
        }
        else {
          XMLWriter _xsl_attr_19 = out.pushAttribute("color", _namespaces[0]);
          out.valueOf(_exprs[63].evalObject(node, env));
          out.popAttribute(_xsl_attr_19);
        }
        if (_exprs[64].evalBoolean(node, env)) {
          XMLWriter _xsl_attr_20 = out.pushAttribute("font-weight", _namespaces[0]);
          out.print("bold");
          out.popAttribute(_xsl_attr_20);
        }
        else {
          XMLWriter _xsl_attr_21 = out.pushAttribute("font-weight", _namespaces[0]);
          out.print("normal");
          out.popAttribute(_xsl_attr_21);
        }
        if (_exprs[65].evalBoolean(node, env)) {
          XMLWriter _xsl_attr_22 = out.pushAttribute("font-style", _namespaces[0]);
          out.print("italic");
          out.popAttribute(_xsl_attr_22);
        }
        else {
          XMLWriter _xsl_attr_23 = out.pushAttribute("font-style", _namespaces[0]);
          out.print("normal");
          out.popAttribute(_xsl_attr_23);
        }
        out.valueOf(_exprs[66].evalObject(node, env));
        if (_exprs[5].evalBoolean(node, env)) {
          out.print(" ");
        }
        else if (_exprs[6].evalBoolean(node, env)) {
          out.print(", ");
        }
        out.popElement();
      }
      if (_exprs[5].evalBoolean(node, env)) {
        out.setLocation("file:/D:/jose/work/xsl/pdf_header.xsl", "pdf_header.xsl", 149);
        out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
        XMLWriter _xsl_attr_24 = out.pushAttribute("font-family", _namespaces[0]);
        out.valueOf(_exprs[67].evalObject(node, env));
        out.popAttribute(_xsl_attr_24);
        XMLWriter _xsl_attr_25 = out.pushAttribute("font-size", _namespaces[0]);
        out.valueOf(_exprs[68].evalObject(node, env));
        out.print("pt");
        out.popAttribute(_xsl_attr_25);
        if (_exprs[69].evalBoolean(node, env)) {
          XMLWriter _xsl_attr_26 = out.pushAttribute("color", _namespaces[0]);
          out.print("black");
          out.popAttribute(_xsl_attr_26);
        }
        else {
          XMLWriter _xsl_attr_27 = out.pushAttribute("color", _namespaces[0]);
          out.valueOf(_exprs[70].evalObject(node, env));
          out.popAttribute(_xsl_attr_27);
        }
        if (_exprs[71].evalBoolean(node, env)) {
          XMLWriter _xsl_attr_28 = out.pushAttribute("font-weight", _namespaces[0]);
          out.print("bold");
          out.popAttribute(_xsl_attr_28);
        }
        else {
          XMLWriter _xsl_attr_29 = out.pushAttribute("font-weight", _namespaces[0]);
          out.print("normal");
          out.popAttribute(_xsl_attr_29);
        }
        if (_exprs[72].evalBoolean(node, env)) {
          XMLWriter _xsl_attr_30 = out.pushAttribute("font-style", _namespaces[0]);
          out.print("italic");
          out.popAttribute(_xsl_attr_30);
        }
        else {
          XMLWriter _xsl_attr_31 = out.pushAttribute("font-style", _namespaces[0]);
          out.print("normal");
          out.popAttribute(_xsl_attr_31);
        }
        out.valueOf(_exprs[73].evalObject(node, env));
        if (_exprs[6].evalBoolean(node, env)) {
          out.print(", ");
        }
        out.popElement();
      }
      if (_exprs[6].evalBoolean(node, env)) {
        out.setLocation("file:/D:/jose/work/xsl/pdf_header.xsl", "pdf_header.xsl", 176);
        out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
        XMLWriter _xsl_attr_32 = out.pushAttribute("font-family", _namespaces[0]);
        out.valueOf(_exprs[74].evalObject(node, env));
        out.popAttribute(_xsl_attr_32);
        XMLWriter _xsl_attr_33 = out.pushAttribute("font-size", _namespaces[0]);
        out.valueOf(_exprs[75].evalObject(node, env));
        out.print("pt");
        out.popAttribute(_xsl_attr_33);
        if (_exprs[76].evalBoolean(node, env)) {
          XMLWriter _xsl_attr_34 = out.pushAttribute("color", _namespaces[0]);
          out.print("black");
          out.popAttribute(_xsl_attr_34);
        }
        else {
          XMLWriter _xsl_attr_35 = out.pushAttribute("color", _namespaces[0]);
          out.valueOf(_exprs[77].evalObject(node, env));
          out.popAttribute(_xsl_attr_35);
        }
        if (_exprs[78].evalBoolean(node, env)) {
          XMLWriter _xsl_attr_36 = out.pushAttribute("font-weight", _namespaces[0]);
          out.print("bold");
          out.popAttribute(_xsl_attr_36);
        }
        else {
          XMLWriter _xsl_attr_37 = out.pushAttribute("font-weight", _namespaces[0]);
          out.print("normal");
          out.popAttribute(_xsl_attr_37);
        }
        if (_exprs[79].evalBoolean(node, env)) {
          XMLWriter _xsl_attr_38 = out.pushAttribute("font-style", _namespaces[0]);
          out.print("italic");
          out.popAttribute(_xsl_attr_38);
        }
        else {
          XMLWriter _xsl_attr_39 = out.pushAttribute("font-style", _namespaces[0]);
          out.print("normal");
          out.popAttribute(_xsl_attr_39);
        }
        if (_exprs[7].evalBoolean(node, env)) {
          out.setLocation("file:/D:/jose/work/xsl/pdf_header.xsl", "pdf_header.xsl", 194);
          out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
          out.attribute("keep-together.within-line", "always");
          out.valueOf(_exprs[80].evalObject(node, env));
          out.print(" ");
          out.valueOf(_exprs[81].evalObject(node, env));
          if (_exprs[8].evalBoolean(node, env)) {
            out.print(", ");
          }
          out.popElement();
        }
        if (_exprs[8].evalBoolean(node, env)) {
          out.setLocation("file:/D:/jose/work/xsl/pdf_header.xsl", "pdf_header.xsl", 207);
          out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
          out.attribute("keep-together.within-line", "always");
          out.valueOf(_exprs[82].evalObject(node, env));
          out.print(" ");
          out.valueOf(_exprs[83].evalObject(node, env));
          out.popElement();
        }
        out.popElement();
      }
      out.popElement();
    }
  }
  void _xsl_macro_second_ncheader_ncline(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    _exprs[84].addParam(env, "White", node, env);
    _exprs[85].addParam(env, "Black", node, env);
    _exprs[86].addParam(env, "WhiteTitle", node, env);
    _exprs[87].addParam(env, "BlackTitle", node, env);
    _exprs[88].addParam(env, "WhiteELO", node, env);
    _exprs[89].addParam(env, "BlackELO", node, env);
    _exprs[90].addParam(env, "Result", node, env);
    _exprs[91].addParam(env, "isWhite", node, env);
    _exprs[92].addParam(env, "isWhiteTitle", node, env);
    _exprs[93].addParam(env, "isWhiteELO", node, env);
    _exprs[94].addParam(env, "isBlack", node, env);
    _exprs[95].addParam(env, "isBlackTitle", node, env);
    _exprs[96].addParam(env, "isBlackELO", node, env);
    _exprs[97].addParam(env, "isResult", node, env);
    _exprs[98].addParam(env, "white_style", node, env);
    _exprs[99].addParam(env, "black_style", node, env);
    _exprs[100].addParam(env, "result_style", node, env);
    _exprs[101].addParam(env, "white_color", node, env);
    _exprs[102].addParam(env, "black_color", node, env);
    _exprs[103].addParam(env, "result_color", node, env);
    if (_exprs[9].evalBoolean(node, env)) {
      out.setLocation("file:/D:/jose/work/xsl/pdf_header.xsl", "pdf_header.xsl", 253);
      out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "block", "fo:block");
      if (_exprs[10].evalBoolean(node, env)) {
        out.setLocation("file:/D:/jose/work/xsl/pdf_header.xsl", "pdf_header.xsl", 256);
        out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
        XMLWriter _xsl_attr_40 = out.pushAttribute("font-family", _namespaces[0]);
        out.valueOf(_exprs[104].evalObject(node, env));
        out.popAttribute(_xsl_attr_40);
        XMLWriter _xsl_attr_41 = out.pushAttribute("font-size", _namespaces[0]);
        out.valueOf(_exprs[105].evalObject(node, env));
        out.print("pt");
        out.popAttribute(_xsl_attr_41);
        if (_exprs[106].evalBoolean(node, env)) {
          XMLWriter _xsl_attr_42 = out.pushAttribute("color", _namespaces[0]);
          out.print("black");
          out.popAttribute(_xsl_attr_42);
        }
        else {
          XMLWriter _xsl_attr_43 = out.pushAttribute("color", _namespaces[0]);
          out.valueOf(_exprs[107].evalObject(node, env));
          out.popAttribute(_xsl_attr_43);
        }
        if (_exprs[108].evalBoolean(node, env)) {
          XMLWriter _xsl_attr_44 = out.pushAttribute("font-weight", _namespaces[0]);
          out.print("bold");
          out.popAttribute(_xsl_attr_44);
        }
        else {
          XMLWriter _xsl_attr_45 = out.pushAttribute("font-weight", _namespaces[0]);
          out.print("normal");
          out.popAttribute(_xsl_attr_45);
        }
        if (_exprs[109].evalBoolean(node, env)) {
          XMLWriter _xsl_attr_46 = out.pushAttribute("font-style", _namespaces[0]);
          out.print("italic");
          out.popAttribute(_xsl_attr_46);
        }
        else {
          XMLWriter _xsl_attr_47 = out.pushAttribute("font-style", _namespaces[0]);
          out.print("normal");
          out.popAttribute(_xsl_attr_47);
        }
        out.valueOf(_exprs[110].evalObject(node, env));
        if (_exprs[11].evalBoolean(node, env)) {
          out.print(" - ");
        }
        else if (_exprs[12].evalBoolean(node, env)) {
          out.print(" ");
        }
        out.popElement();
      }
      if (_exprs[11].evalBoolean(node, env)) {
        out.setLocation("file:/D:/jose/work/xsl/pdf_header.xsl", "pdf_header.xsl", 288);
        out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
        out.attribute("keep-with-next.within-line", "always");
        XMLWriter _xsl_attr_48 = out.pushAttribute("font-family", _namespaces[0]);
        out.valueOf(_exprs[111].evalObject(node, env));
        out.popAttribute(_xsl_attr_48);
        XMLWriter _xsl_attr_49 = out.pushAttribute("font-size", _namespaces[0]);
        out.valueOf(_exprs[112].evalObject(node, env));
        out.print("pt");
        out.popAttribute(_xsl_attr_49);
        if (_exprs[113].evalBoolean(node, env)) {
          XMLWriter _xsl_attr_50 = out.pushAttribute("color", _namespaces[0]);
          out.print("black");
          out.popAttribute(_xsl_attr_50);
        }
        else {
          XMLWriter _xsl_attr_51 = out.pushAttribute("color", _namespaces[0]);
          out.valueOf(_exprs[114].evalObject(node, env));
          out.popAttribute(_xsl_attr_51);
        }
        if (_exprs[115].evalBoolean(node, env)) {
          XMLWriter _xsl_attr_52 = out.pushAttribute("font-weight", _namespaces[0]);
          out.print("bold");
          out.popAttribute(_xsl_attr_52);
        }
        else {
          XMLWriter _xsl_attr_53 = out.pushAttribute("font-weight", _namespaces[0]);
          out.print("normal");
          out.popAttribute(_xsl_attr_53);
        }
        if (_exprs[116].evalBoolean(node, env)) {
          XMLWriter _xsl_attr_54 = out.pushAttribute("font-style", _namespaces[0]);
          out.print("italic");
          out.popAttribute(_xsl_attr_54);
        }
        else {
          XMLWriter _xsl_attr_55 = out.pushAttribute("font-style", _namespaces[0]);
          out.print("normal");
          out.popAttribute(_xsl_attr_55);
        }
        out.valueOf(_exprs[117].evalObject(node, env));
        if (_exprs[12].evalBoolean(node, env)) {
          out.print(" ");
        }
        out.popElement();
      }
      if (_exprs[12].evalBoolean(node, env)) {
        out.setLocation("file:/D:/jose/work/xsl/pdf_header.xsl", "pdf_header.xsl", 315);
        out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
        XMLWriter _xsl_attr_56 = out.pushAttribute("font-family", _namespaces[0]);
        out.valueOf(_exprs[118].evalObject(node, env));
        out.popAttribute(_xsl_attr_56);
        XMLWriter _xsl_attr_57 = out.pushAttribute("font-size", _namespaces[0]);
        out.valueOf(_exprs[119].evalObject(node, env));
        out.print("pt");
        out.popAttribute(_xsl_attr_57);
        if (_exprs[120].evalBoolean(node, env)) {
          XMLWriter _xsl_attr_58 = out.pushAttribute("color", _namespaces[0]);
          out.print("black");
          out.popAttribute(_xsl_attr_58);
        }
        else {
          XMLWriter _xsl_attr_59 = out.pushAttribute("color", _namespaces[0]);
          out.valueOf(_exprs[121].evalObject(node, env));
          out.popAttribute(_xsl_attr_59);
        }
        if (_exprs[122].evalBoolean(node, env)) {
          XMLWriter _xsl_attr_60 = out.pushAttribute("font-weight", _namespaces[0]);
          out.print("bold");
          out.popAttribute(_xsl_attr_60);
        }
        else {
          XMLWriter _xsl_attr_61 = out.pushAttribute("font-weight", _namespaces[0]);
          out.print("normal");
          out.popAttribute(_xsl_attr_61);
        }
        if (_exprs[123].evalBoolean(node, env)) {
          XMLWriter _xsl_attr_62 = out.pushAttribute("font-style", _namespaces[0]);
          out.print("italic");
          out.popAttribute(_xsl_attr_62);
        }
        else {
          XMLWriter _xsl_attr_63 = out.pushAttribute("font-style", _namespaces[0]);
          out.print("normal");
          out.popAttribute(_xsl_attr_63);
        }
        out.valueOf(_exprs[124].evalObject(node, env));
        out.popElement();
      }
      out.popElement();
    }
  }
  void _xsl_macro_third_ncheader_ncline(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    _exprs[125].addParam(env, "ECO", node, env);
    _exprs[126].addParam(env, "Opening", node, env);
    _exprs[127].addParam(env, "Annotator", node, env);
    _exprs[128].addParam(env, "isECO", node, env);
    _exprs[129].addParam(env, "isOpening", node, env);
    _exprs[130].addParam(env, "isAnnotator", node, env);
    if (_exprs[13].evalBoolean(node, env)) {
      out.setLocation("file:/D:/jose/work/xsl/pdf_header.xsl", "pdf_header.xsl", 356);
      out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "block", "fo:block");
      out.valueOf(_exprs[131].evalObject(node, env));
      if (_exprs[14].evalBoolean(node, env)) {
        out.print(" ");
      }
      out.valueOf(_exprs[132].evalObject(node, env));
      out.popElement();
    }
    if (_exprs[15].evalBoolean(node, env)) {
      out.setLocation("file:/D:/jose/work/xsl/pdf_header.xsl", "pdf_header.xsl", 368);
      out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "block", "fo:block");
      out.valueOf(_exprs[133].evalObject(node, env));
      out.print(" ");
      out.valueOf(_exprs[134].evalObject(node, env));
      out.popElement();
    }
  }

  // '/'
// file:///D:/jose/work/xsl/pdf.xsl:23
  private void _xsl_template_(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    _exprs[135].addParam(env, "pgno_style", node, env);
    if (env.getVar("header_extent") == null) {
      XMLWriter frag0 = out.pushFragment();
      out.print("0.5cm");
      env.addVar("header_extent", out.popFragment(frag0));
    }
    if (env.getVar("footer_extent") == null) {
      XMLWriter frag1 = out.pushFragment();
      out.print("1.1cm");
      env.addVar("footer_extent", out.popFragment(frag1));
    }
    if (env.getVar("column-count") == null) {
      XMLWriter frag2 = out.pushFragment();
      out.print("2");
      env.addVar("column-count", out.popFragment(frag2));
    }
    if (env.getVar("language") == null) {
      XMLWriter frag3 = out.pushFragment();
      out.print("de");
      env.addVar("language", out.popFragment(frag3));
    }
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 33);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "root", "fo:root");
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 34);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "layout-master-set", "fo:layout-master-set");
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 35);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "simple-page-master", "fo:simple-page-master");
    out.attribute("master-name", "content-page");
    XMLWriter _xsl_attr_4 = out.pushAttribute("page-width", _namespaces[1]);
    out.valueOf(_exprs[136].evalObject(node, env));
    out.print("pt");
    out.popAttribute(_xsl_attr_4);
    XMLWriter _xsl_attr_5 = out.pushAttribute("page-height", _namespaces[1]);
    out.valueOf(_exprs[137].evalObject(node, env));
    out.print("pt");
    out.popAttribute(_xsl_attr_5);
    XMLWriter _xsl_attr_6 = out.pushAttribute("margin-top", _namespaces[1]);
    out.valueOf(_exprs[138].evalObject(node, env));
    out.print("pt");
    out.popAttribute(_xsl_attr_6);
    XMLWriter _xsl_attr_7 = out.pushAttribute("margin-bottom", _namespaces[1]);
    out.valueOf(_exprs[139].evalObject(node, env));
    out.print("pt");
    out.popAttribute(_xsl_attr_7);
    XMLWriter _xsl_attr_8 = out.pushAttribute("margin-left", _namespaces[1]);
    out.valueOf(_exprs[140].evalObject(node, env));
    out.print("pt");
    out.popAttribute(_xsl_attr_8);
    XMLWriter _xsl_attr_9 = out.pushAttribute("margin-right", _namespaces[1]);
    out.valueOf(_exprs[141].evalObject(node, env));
    out.print("pt");
    out.popAttribute(_xsl_attr_9);
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 42);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "region-before", "fo:region-before");
    XMLWriter _xsl_attr_10 = out.pushAttribute("extent", _namespaces[1]);
    out.valueOf(_exprs[142].evalObject(node, env));
    out.popAttribute(_xsl_attr_10);
    out.popElement();
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 45);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "region-after", "fo:region-after");
    XMLWriter _xsl_attr_11 = out.pushAttribute("extent", _namespaces[1]);
    out.valueOf(_exprs[143].evalObject(node, env));
    out.popAttribute(_xsl_attr_11);
    out.popElement();
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 50);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "region-body", "fo:region-body");
    out.attribute("column-gap", "10pt");
    XMLWriter _xsl_attr_12 = out.pushAttribute("column-count", _namespaces[1]);
    out.valueOf(_exprs[144].evalObject(node, env));
    out.popAttribute(_xsl_attr_12);
    XMLWriter _xsl_attr_13 = out.pushAttribute("margin-top", _namespaces[1]);
    out.valueOf(_exprs[142].evalObject(node, env));
    out.popAttribute(_xsl_attr_13);
    XMLWriter _xsl_attr_14 = out.pushAttribute("margin-bottom", _namespaces[1]);
    out.valueOf(_exprs[143].evalObject(node, env));
    out.popAttribute(_xsl_attr_14);
    out.popElement();
    out.popElement();
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 57);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "page-sequence-master", "fo:page-sequence-master");
    out.attribute("master-name", "content-sequence");
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 58);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "repeatable-page-master-reference", "fo:repeatable-page-master-reference");
    out.attribute("master-reference", "content-page");
    out.popElement();
    out.popElement();
    out.popElement();
    if (_exprs[16].evalBoolean(node, env)) {
      {
        com.caucho.xpath.pattern.AbstractPattern _xsl_sel15;
        _xsl_sel15 = _select_patterns[0];
        Node _xsl_cxt15 = env.getContextNode();
        Node _xsl_cur15 = env.getCurrentNode();
        NodeIterator _xsl_iter16 = _xsl_sel15.select(node, env);
        ExprEnvironment _xsl_env15 = env.setExprEnv(_xsl_iter16);
        while (_xsl_iter16.hasNext()) {
          Node node1 = node;
          node = _xsl_iter16.nextNode();
          env.setCurrentNode(node);
          out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 65);
          out.pushElement("http://xml.apache.org/fop/extensions", "fox", "outline", "fox:outline");
          XMLWriter _xsl_attr_17 = out.pushAttribute("internal-destination", _namespaces[1]);
          out.print("game-");
          out.valueOf(_exprs[145].evalObject(node, env));
          out.popAttribute(_xsl_attr_17);
          out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 67);
          out.pushElement("http://xml.apache.org/fop/extensions", "fox", "label", "fox:label");
          out.valueOf(_exprs[146].evalObject(node, env));
          out.print(" ");
          out.valueOf(_exprs[147].evalObject(node, env));
          out.print(", ");
          out.valueOf(_exprs[148].evalObject(node, env));
          out.print(" ");
          out.valueOf(_exprs[149].evalObject(node, env));
          out.popElement();
          out.popElement();
          node = node1;
          env.setCurrentNode(_xsl_cur15);
        }
        env.setExprEnv(_xsl_env15);
      }
    }
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 80);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "page-sequence", "fo:page-sequence");
    out.attribute("master-reference", "content-sequence");
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 82);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "static-content", "fo:static-content");
    out.attribute("flow-name", "xsl-region-before");
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 83);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "block", "fo:block");
    out.attribute("text-align", "center");
    out.attribute("padding-top", "-4pt");
    out.attribute("line-height", "4pt");
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 87);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "leader", "fo:leader");
    out.attribute("leader-pattern", "rule");
    out.attribute("rule-thickness", "0.5pt");
    out.attribute("leader-alignment", "page");
    out.attribute("leader-length", "100%");
    out.popElement();
    out.popElement();
    out.popElement();
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 92);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "static-content", "fo:static-content");
    out.attribute("flow-name", "xsl-region-after");
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 93);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "block", "fo:block");
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 95);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "leader", "fo:leader");
    out.attribute("leader-pattern", "rule");
    out.attribute("rule-thickness", "0.5pt");
    out.attribute("leader-alignment", "page");
    XMLWriter _xsl_attr_18 = out.pushAttribute("leader-length", _namespaces[1]);
    out.print("100%");
    out.popAttribute(_xsl_attr_18);
    out.popElement();
    out.popElement();
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 100);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "block", "fo:block");
    out.attribute("text-align", "end");
    XMLWriter _xsl_attr_19 = out.pushAttribute("font-family", _namespaces[1]);
    out.valueOf(_exprs[150].evalObject(node, env));
    out.popAttribute(_xsl_attr_19);
    XMLWriter _xsl_attr_20 = out.pushAttribute("font-size", _namespaces[1]);
    out.valueOf(_exprs[151].evalObject(node, env));
    out.print("pt");
    out.popAttribute(_xsl_attr_20);
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 104);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "page-number", "fo:page-number");
    out.popElement();
    out.popElement();
    out.popElement();
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 114);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "flow", "fo:flow");
    out.attribute("flow-name", "xsl-region-body");
    out.attribute("language", "de");
    out.attribute("hyphenate", "true");
    out.attribute("hyphenation-push-character-count", "2");
    out.attribute("hyphenation-remain-character-count", "2");
    out.attribute("overflow", "visible");
    XMLWriter _xsl_attr_21 = out.pushAttribute("language", _namespaces[1]);
    out.valueOf(_exprs[152].evalObject(node, env));
    out.popAttribute(_xsl_attr_21);
    {
      Env _xsl_arg1 = XPath.createCall(env);
      Iterator _xsl_iter22 = _select_patterns[0].select(node, env);
      while (_xsl_iter22.hasNext()) {
        Node _xsl_ptr23 = (Node) _xsl_iter22.next();
        _xsl_arg1.setSelect(node, _select_patterns[0]);
        _xsl_arg1.setCurrentNode(_xsl_ptr23);
        applyNode(out, _xsl_ptr23, _xsl_arg1, 0, 2147483647);
      }
      _xsl_arg1.free();
    }
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 119);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "block", "fo:block");
    out.attribute("text-align", "center");
    out.attribute("vertical-align", "bottom");
    XMLWriter _xsl_attr_24 = out.pushAttribute("font-family", _namespaces[1]);
    out.valueOf(_exprs[153].evalObject(node, env));
    out.popAttribute(_xsl_attr_24);
    XMLWriter _xsl_attr_25 = out.pushAttribute("font-size", _namespaces[1]);
    out.valueOf(_exprs[154].evalObject(node, env));
    out.print("pt");
    out.popAttribute(_xsl_attr_25);
    XMLWriter _xsl_attr_26 = out.pushAttribute("color", _namespaces[1]);
    out.valueOf(_exprs[155].evalObject(node, env));
    out.popAttribute(_xsl_attr_26);
    out.print("\n			\n			                  			created with jose-chess.sourceforge.net\n					");
    out.popElement();
    out.popElement();
    out.popElement();
    out.popElement();
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'game'
// file:///D:/jose/work/xsl/pdf.xsl:132
  private void _xsl_template_game(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 133);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "block", "fo:block");
    XMLWriter _xsl_attr_0 = out.pushAttribute("id", _namespaces[1]);
    out.print("game-");
    out.valueOf(_exprs[145].evalObject(node, env));
    out.popAttribute(_xsl_attr_0);
    {
      Env _xsl_arg1 = XPath.createCall(env);
      for (Node _xsl_ptr1 = node.getFirstChild();
           _xsl_ptr1 != null;
           _xsl_ptr1 = _xsl_ptr1.getNextSibling()) {
        if (_xsl_ptr1.getNodeName() == "head" &&
            _xsl_ptr1 instanceof Element) {
          _xsl_arg1.setSelect(node, _select_patterns[1]);
          _xsl_arg1.setCurrentNode(_xsl_ptr1);
          applyNode(out, _xsl_ptr1, _xsl_arg1, 0, 2147483647);
        }
      }
      _xsl_arg1.free();
    }
    {
      Env _xsl_arg1 = XPath.createCall(env);
      for (Node _xsl_ptr2 = node.getFirstChild();
           _xsl_ptr2 != null;
           _xsl_ptr2 = _xsl_ptr2.getNextSibling()) {
        if (_xsl_ptr2.getNodeName() == "diagram" &&
            _xsl_ptr2 instanceof Element) {
          _xsl_arg1.setSelect(node, _select_patterns[2]);
          _xsl_arg1.setCurrentNode(_xsl_ptr2);
          applyNode(out, _xsl_ptr2, _xsl_arg1, 0, 2147483647);
        }
      }
      _xsl_arg1.free();
    }
    {
      Env _xsl_arg1 = XPath.createCall(env);
      for (Node _xsl_ptr3 = node.getFirstChild();
           _xsl_ptr3 != null;
           _xsl_ptr3 = _xsl_ptr3.getNextSibling()) {
        if (_xsl_ptr3.getNodeName() == "body" &&
            _xsl_ptr3 instanceof Element) {
          _xsl_arg1.setSelect(node, _select_patterns[3]);
          _xsl_arg1.setCurrentNode(_xsl_ptr3);
          applyNode(out, _xsl_ptr3, _xsl_arg1, 0, 2147483647);
        }
      }
      _xsl_arg1.free();
    }
    out.popElement();
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'body'
// file:///D:/jose/work/xsl/pdf.xsl:146
  private void _xsl_template_body(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 147);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "block", "fo:block");
    out.attribute("text-align", "justify");
    out.attribute("padding-after", "24pt");
    {
      Env _xsl_arg1 = XPath.createCall(env);
      for (Node _xsl_node = node.getFirstChild();
           _xsl_node != null;
           _xsl_node = _xsl_node.getNextSibling()) {
        _xsl_arg1.setSelect(node, null);
        _xsl_arg1.setCurrentNode(_xsl_node);
        applyNode(out, _xsl_node, _xsl_arg1, 0, 2147483647);
      }
      _xsl_arg1.free();
    }
    out.popElement();
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'v'
// file:///D:/jose/work/xsl/pdf.xsl:161
  private void _xsl_template_v(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    _exprs[156].addParam(env, "style_name", node, env);
    _exprs[157].addParam(env, "style", node, env);
    _exprs[24].addParam(env, "color", node, env);
    _exprs[158].addParam(env, "prefix", node, env);
    _exprs[159].addParam(env, "suffix", node, env);
    if (_exprs[160].evalBoolean(node, env)) {
      out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 175);
      out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "block", "fo:block");
      out.attribute("padding-top", "10pt");
      out.attribute("padding-bottom", "10pt");
      XMLWriter _xsl_attr_0 = out.pushAttribute("font-family", _namespaces[1]);
      out.valueOf(_exprs[25].evalObject(node, env));
      out.popAttribute(_xsl_attr_0);
      XMLWriter _xsl_attr_1 = out.pushAttribute("font-size", _namespaces[1]);
      out.valueOf(_exprs[26].evalObject(node, env));
      out.print("pt");
      out.popAttribute(_xsl_attr_1);
      if (_exprs[27].evalBoolean(node, env)) {
        XMLWriter _xsl_attr_2 = out.pushAttribute("color", _namespaces[1]);
        out.print("black");
        out.popAttribute(_xsl_attr_2);
      }
      else {
        XMLWriter _xsl_attr_3 = out.pushAttribute("color", _namespaces[1]);
        out.valueOf(_exprs[28].evalObject(node, env));
        out.popAttribute(_xsl_attr_3);
      }
      if (_exprs[29].evalBoolean(node, env)) {
        XMLWriter _xsl_attr_4 = out.pushAttribute("font-weight", _namespaces[1]);
        out.print("bold");
        out.popAttribute(_xsl_attr_4);
      }
      else {
        XMLWriter _xsl_attr_5 = out.pushAttribute("font-weight", _namespaces[1]);
        out.print("normal");
        out.popAttribute(_xsl_attr_5);
      }
      if (_exprs[30].evalBoolean(node, env)) {
        XMLWriter _xsl_attr_6 = out.pushAttribute("font-style", _namespaces[1]);
        out.print("italic");
        out.popAttribute(_xsl_attr_6);
      }
      else {
        XMLWriter _xsl_attr_7 = out.pushAttribute("font-style", _namespaces[1]);
        out.print("normal");
        out.popAttribute(_xsl_attr_7);
      }
      if (_exprs[17].evalBoolean(node, env)) {
        out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 193);
        out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
        out.valueOf(_exprs[161].evalObject(node, env));
        out.popElement();
      }
      {
        Env _xsl_arg1 = XPath.createCall(env);
        for (Node _xsl_node = node.getFirstChild();
             _xsl_node != null;
             _xsl_node = _xsl_node.getNextSibling()) {
          _xsl_arg1.setSelect(node, null);
          _xsl_arg1.setCurrentNode(_xsl_node);
          applyNode(out, _xsl_node, _xsl_arg1, 0, 2147483647);
        }
        _xsl_arg1.free();
      }
      if (_exprs[18].evalBoolean(node, env)) {
        out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 200);
        out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
        out.valueOf(_exprs[162].evalObject(node, env));
        out.popElement();
      }
      out.popElement();
    }
    else if (_exprs[163].evalBoolean(node, env)) {
      out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 211);
      out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "block", "fo:block");
      out.attribute("margin-left", "12pt");
      out.attribute("padding-top", "10pt");
      out.attribute("padding-bottom", "10pt");
      XMLWriter _xsl_attr_8 = out.pushAttribute("font-family", _namespaces[1]);
      out.valueOf(_exprs[25].evalObject(node, env));
      out.popAttribute(_xsl_attr_8);
      XMLWriter _xsl_attr_9 = out.pushAttribute("font-size", _namespaces[1]);
      out.valueOf(_exprs[26].evalObject(node, env));
      out.print("pt");
      out.popAttribute(_xsl_attr_9);
      if (_exprs[27].evalBoolean(node, env)) {
        XMLWriter _xsl_attr_10 = out.pushAttribute("color", _namespaces[1]);
        out.print("black");
        out.popAttribute(_xsl_attr_10);
      }
      else {
        XMLWriter _xsl_attr_11 = out.pushAttribute("color", _namespaces[1]);
        out.valueOf(_exprs[28].evalObject(node, env));
        out.popAttribute(_xsl_attr_11);
      }
      if (_exprs[29].evalBoolean(node, env)) {
        XMLWriter _xsl_attr_12 = out.pushAttribute("font-weight", _namespaces[1]);
        out.print("bold");
        out.popAttribute(_xsl_attr_12);
      }
      else {
        XMLWriter _xsl_attr_13 = out.pushAttribute("font-weight", _namespaces[1]);
        out.print("normal");
        out.popAttribute(_xsl_attr_13);
      }
      if (_exprs[30].evalBoolean(node, env)) {
        XMLWriter _xsl_attr_14 = out.pushAttribute("font-style", _namespaces[1]);
        out.print("italic");
        out.popAttribute(_xsl_attr_14);
      }
      else {
        XMLWriter _xsl_attr_15 = out.pushAttribute("font-style", _namespaces[1]);
        out.print("normal");
        out.popAttribute(_xsl_attr_15);
      }
      if (_exprs[17].evalBoolean(node, env)) {
        out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 229);
        out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
        out.valueOf(_exprs[161].evalObject(node, env));
        out.popElement();
      }
      {
        Env _xsl_arg1 = XPath.createCall(env);
        for (Node _xsl_node = node.getFirstChild();
             _xsl_node != null;
             _xsl_node = _xsl_node.getNextSibling()) {
          _xsl_arg1.setSelect(node, null);
          _xsl_arg1.setCurrentNode(_xsl_node);
          applyNode(out, _xsl_node, _xsl_arg1, 0, 2147483647);
        }
        _xsl_arg1.free();
      }
      if (_exprs[18].evalBoolean(node, env)) {
        out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 236);
        out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
        out.valueOf(_exprs[162].evalObject(node, env));
        out.popElement();
      }
      out.popElement();
    }
    else {
      out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 245);
      out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
      XMLWriter _xsl_attr_16 = out.pushAttribute("font-family", _namespaces[1]);
      out.valueOf(_exprs[25].evalObject(node, env));
      out.popAttribute(_xsl_attr_16);
      XMLWriter _xsl_attr_17 = out.pushAttribute("font-size", _namespaces[1]);
      out.valueOf(_exprs[26].evalObject(node, env));
      out.print("pt");
      out.popAttribute(_xsl_attr_17);
      if (_exprs[27].evalBoolean(node, env)) {
        XMLWriter _xsl_attr_18 = out.pushAttribute("color", _namespaces[1]);
        out.print("black");
        out.popAttribute(_xsl_attr_18);
      }
      else {
        XMLWriter _xsl_attr_19 = out.pushAttribute("color", _namespaces[1]);
        out.valueOf(_exprs[28].evalObject(node, env));
        out.popAttribute(_xsl_attr_19);
      }
      if (_exprs[29].evalBoolean(node, env)) {
        XMLWriter _xsl_attr_20 = out.pushAttribute("font-weight", _namespaces[1]);
        out.print("bold");
        out.popAttribute(_xsl_attr_20);
      }
      else {
        XMLWriter _xsl_attr_21 = out.pushAttribute("font-weight", _namespaces[1]);
        out.print("normal");
        out.popAttribute(_xsl_attr_21);
      }
      if (_exprs[30].evalBoolean(node, env)) {
        XMLWriter _xsl_attr_22 = out.pushAttribute("font-style", _namespaces[1]);
        out.print("italic");
        out.popAttribute(_xsl_attr_22);
      }
      else {
        XMLWriter _xsl_attr_23 = out.pushAttribute("font-style", _namespaces[1]);
        out.print("normal");
        out.popAttribute(_xsl_attr_23);
      }
      if (_exprs[17].evalBoolean(node, env)) {
        out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 263);
        out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
        out.valueOf(_exprs[161].evalObject(node, env));
        out.popElement();
      }
      {
        Env _xsl_arg1 = XPath.createCall(env);
        for (Node _xsl_node = node.getFirstChild();
             _xsl_node != null;
             _xsl_node = _xsl_node.getNextSibling()) {
          _xsl_arg1.setSelect(node, null);
          _xsl_arg1.setCurrentNode(_xsl_node);
          applyNode(out, _xsl_node, _xsl_arg1, 0, 2147483647);
        }
        _xsl_arg1.free();
      }
      if (_exprs[18].evalBoolean(node, env)) {
        out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 269);
        out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
        out.valueOf(_exprs[162].evalObject(node, env));
        out.popElement();
      }
      out.popElement();
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'depth'
// file:///D:/jose/work/xsl/pdf.xsl:277
  private void _xsl_template_depth(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'm'
// file:///D:/jose/work/xsl/pdf.xsl:280
  private void _xsl_template_m(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 281);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
    out.print(" ");
    {
      Env _xsl_arg1 = XPath.createCall(env);
      for (Node _xsl_node = node.getFirstChild();
           _xsl_node != null;
           _xsl_node = _xsl_node.getNextSibling()) {
        _xsl_arg1.setSelect(node, null);
        _xsl_arg1.setCurrentNode(_xsl_node);
        applyNode(out, _xsl_node, _xsl_arg1, 0, 2147483647);
      }
      _xsl_arg1.free();
    }
    out.print(" ");
    out.popElement();
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'c'
// file:///D:/jose/work/xsl/pdf.xsl:289
  private void _xsl_template_c(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    _exprs[164].addParam(env, "style_name", node, env);
    _exprs[157].addParam(env, "style", node, env);
    _exprs[24].addParam(env, "color", node, env);
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 294);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
    XMLWriter _xsl_attr_0 = out.pushAttribute("font-family", _namespaces[1]);
    out.valueOf(_exprs[25].evalObject(node, env));
    out.popAttribute(_xsl_attr_0);
    XMLWriter _xsl_attr_1 = out.pushAttribute("font-size", _namespaces[1]);
    out.valueOf(_exprs[26].evalObject(node, env));
    out.print("pt");
    out.popAttribute(_xsl_attr_1);
    if (_exprs[27].evalBoolean(node, env)) {
      XMLWriter _xsl_attr_2 = out.pushAttribute("color", _namespaces[1]);
      out.print("black");
      out.popAttribute(_xsl_attr_2);
    }
    else {
      XMLWriter _xsl_attr_3 = out.pushAttribute("color", _namespaces[1]);
      out.valueOf(_exprs[28].evalObject(node, env));
      out.popAttribute(_xsl_attr_3);
    }
    if (_exprs[29].evalBoolean(node, env)) {
      XMLWriter _xsl_attr_4 = out.pushAttribute("font-weight", _namespaces[1]);
      out.print("bold");
      out.popAttribute(_xsl_attr_4);
    }
    else {
      XMLWriter _xsl_attr_5 = out.pushAttribute("font-weight", _namespaces[1]);
      out.print("normal");
      out.popAttribute(_xsl_attr_5);
    }
    if (_exprs[30].evalBoolean(node, env)) {
      XMLWriter _xsl_attr_6 = out.pushAttribute("font-style", _namespaces[1]);
      out.print("italic");
      out.popAttribute(_xsl_attr_6);
    }
    else {
      XMLWriter _xsl_attr_7 = out.pushAttribute("font-style", _namespaces[1]);
      out.print("normal");
      out.popAttribute(_xsl_attr_7);
    }
    out.print(" ");
    {
      Env _xsl_arg1 = XPath.createCall(env);
      for (Node _xsl_node = node.getFirstChild();
           _xsl_node != null;
           _xsl_node = _xsl_node.getNextSibling()) {
        _xsl_arg1.setSelect(node, null);
        _xsl_arg1.setCurrentNode(_xsl_node);
        applyNode(out, _xsl_node, _xsl_arg1, 0, 2147483647);
      }
      _xsl_arg1.free();
    }
    out.print(" ");
    out.popElement();
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'bold'
// file:///D:/jose/work/xsl/pdf.xsl:316
  private void _xsl_template_bold(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 317);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
    out.attribute("font-weight", "bold");
    {
      Env _xsl_arg1 = XPath.createCall(env);
      for (Node _xsl_node = node.getFirstChild();
           _xsl_node != null;
           _xsl_node = _xsl_node.getNextSibling()) {
        _xsl_arg1.setSelect(node, null);
        _xsl_arg1.setCurrentNode(_xsl_node);
        applyNode(out, _xsl_node, _xsl_arg1, 0, 2147483647);
      }
      _xsl_arg1.free();
    }
    out.popElement();
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'italic'
// file:///D:/jose/work/xsl/pdf.xsl:319
  private void _xsl_template_italic(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 320);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
    out.attribute("font-style", "italic");
    {
      Env _xsl_arg1 = XPath.createCall(env);
      for (Node _xsl_node = node.getFirstChild();
           _xsl_node != null;
           _xsl_node = _xsl_node.getNextSibling()) {
        _xsl_arg1.setSelect(node, null);
        _xsl_arg1.setCurrentNode(_xsl_node);
        applyNode(out, _xsl_node, _xsl_arg1, 0, 2147483647);
      }
      _xsl_arg1.free();
    }
    out.popElement();
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'underline'
// file:///D:/jose/work/xsl/pdf.xsl:322
  private void _xsl_template_underline(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 323);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
    out.attribute("text-decoration", "underline");
    {
      Env _xsl_arg1 = XPath.createCall(env);
      for (Node _xsl_node = node.getFirstChild();
           _xsl_node != null;
           _xsl_node = _xsl_node.getNextSibling()) {
        _xsl_arg1.setSelect(node, null);
        _xsl_arg1.setCurrentNode(_xsl_node);
        applyNode(out, _xsl_node, _xsl_arg1, 0, 2147483647);
      }
      _xsl_arg1.free();
    }
    out.popElement();
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'center'
// file:///D:/jose/work/xsl/pdf.xsl:325
  private void _xsl_template_center(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 326);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "block", "fo:block");
    out.attribute("text-align", "center");
    {
      Env _xsl_arg1 = XPath.createCall(env);
      for (Node _xsl_node = node.getFirstChild();
           _xsl_node != null;
           _xsl_node = _xsl_node.getNextSibling()) {
        _xsl_arg1.setSelect(node, null);
        _xsl_arg1.setCurrentNode(_xsl_node);
        applyNode(out, _xsl_node, _xsl_arg1, 0, 2147483647);
      }
      _xsl_arg1.free();
    }
    out.popElement();
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'right'
// file:///D:/jose/work/xsl/pdf.xsl:328
  private void _xsl_template_right(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 329);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "block", "fo:block");
    out.attribute("text-align", "right");
    {
      Env _xsl_arg1 = XPath.createCall(env);
      for (Node _xsl_node = node.getFirstChild();
           _xsl_node != null;
           _xsl_node = _xsl_node.getNextSibling()) {
        _xsl_arg1.setSelect(node, null);
        _xsl_arg1.setCurrentNode(_xsl_node);
        applyNode(out, _xsl_node, _xsl_arg1, 0, 2147483647);
      }
      _xsl_arg1.free();
    }
    out.popElement();
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'font'
// file:///D:/jose/work/xsl/pdf.xsl:331
  private void _xsl_template_font(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 332);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
    if (_exprs[19].evalBoolean(node, env)) {
      _exprs[165].addVar(env, "percent", node, env);
      XMLWriter _xsl_attr_0 = out.pushAttribute("font-size", _namespaces[1]);
      out.valueOf(_exprs[166].evalObject(node, env));
      out.print("%");
      out.popAttribute(_xsl_attr_0);
      env.popVars(1);
    }
    if (_exprs[20].evalBoolean(node, env)) {
      XMLWriter _xsl_attr_1 = out.pushAttribute("color", _namespaces[1]);
      if (node instanceof Element)
        out.print(((Element) node).getAttribute("color"));
      out.popAttribute(_xsl_attr_1);
    }
    if (_exprs[21].evalBoolean(node, env)) {
      XMLWriter _xsl_attr_2 = out.pushAttribute("font-family", _namespaces[1]);
      if (node instanceof Element)
        out.print(((Element) node).getAttribute("face"));
      out.popAttribute(_xsl_attr_2);
    }
    {
      Env _xsl_arg1 = XPath.createCall(env);
      for (Node _xsl_node = node.getFirstChild();
           _xsl_node != null;
           _xsl_node = _xsl_node.getNextSibling()) {
        _xsl_arg1.setSelect(node, null);
        _xsl_arg1.setCurrentNode(_xsl_node);
        applyNode(out, _xsl_node, _xsl_arg1, 0, 2147483647);
      }
      _xsl_arg1.free();
    }
    out.popElement();
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'br'
// file:///D:/jose/work/xsl/pdf.xsl:347
  private void _xsl_template_br(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 348);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "block", "fo:block");
    out.popElement();
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'a'
// file:///D:/jose/work/xsl/pdf.xsl:359
  private void _xsl_template_a(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    if (_exprs[167].evalBoolean(node, env)) {
      {
        Env _xsl_arg1 = XPath.createCall(env);
        _exprs[168].addVar(_xsl_arg1, "sym", node, env);
        _xsl_macro_sym_ncannotation(out, node, _xsl_arg1);
        _xsl_arg1.free();
      }
    }
    else {
      _xsl_loop0:
      for (Node _xsl_ptr1 = node.getFirstChild();
           _xsl_ptr1 != null;
           _xsl_ptr1 = _xsl_ptr1.getNextSibling()) {
        if (_xsl_ptr1.getNodeName() == "text" &&
            _xsl_ptr1 instanceof Element) {
          out.valueOf(_xsl_ptr1);
          break _xsl_loop0;
        }
      }
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }

  void _xsl_macro_sym_ncannotation(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    _exprs[169].addParam(env, "style", node, env);
    _exprs[24].addParam(env, "color", node, env);
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 379);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
    XMLWriter _xsl_attr_2 = out.pushAttribute("font-family", _namespaces[1]);
    out.valueOf(_exprs[25].evalObject(node, env));
    out.popAttribute(_xsl_attr_2);
    XMLWriter _xsl_attr_3 = out.pushAttribute("font-size", _namespaces[1]);
    out.valueOf(_exprs[26].evalObject(node, env));
    out.print("pt");
    out.popAttribute(_xsl_attr_3);
    if (_exprs[27].evalBoolean(node, env)) {
      XMLWriter _xsl_attr_4 = out.pushAttribute("color", _namespaces[1]);
      out.print("black");
      out.popAttribute(_xsl_attr_4);
    }
    else {
      XMLWriter _xsl_attr_5 = out.pushAttribute("color", _namespaces[1]);
      out.valueOf(_exprs[28].evalObject(node, env));
      out.popAttribute(_xsl_attr_5);
    }
    if (_exprs[29].evalBoolean(node, env)) {
      XMLWriter _xsl_attr_6 = out.pushAttribute("font-weight", _namespaces[1]);
      out.print("bold");
      out.popAttribute(_xsl_attr_6);
    }
    else {
      XMLWriter _xsl_attr_7 = out.pushAttribute("font-weight", _namespaces[1]);
      out.print("normal");
      out.popAttribute(_xsl_attr_7);
    }
    if (_exprs[30].evalBoolean(node, env)) {
      XMLWriter _xsl_attr_8 = out.pushAttribute("font-style", _namespaces[1]);
      out.print("italic");
      out.popAttribute(_xsl_attr_8);
    }
    else {
      XMLWriter _xsl_attr_9 = out.pushAttribute("font-style", _namespaces[1]);
      out.print("normal");
      out.popAttribute(_xsl_attr_9);
    }
    out.valueOf(_exprs[170].evalObject(node, env));
    out.popElement();
  }

  // 'n'
// file:///D:/jose/work/xsl/pdf.xsl:404
  private void _xsl_template_n(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    {
      Env _xsl_arg1 = XPath.createCall(env);
      _exprs[171].addVar(_xsl_arg1, "f", node, env);
      _xsl_macro_fig(out, node, _xsl_arg1);
      _xsl_arg1.free();
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'b'
// file:///D:/jose/work/xsl/pdf.xsl:409
  private void _xsl_template_b(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    {
      Env _xsl_arg1 = XPath.createCall(env);
      _exprs[172].addVar(_xsl_arg1, "f", node, env);
      _xsl_macro_fig(out, node, _xsl_arg1);
      _xsl_arg1.free();
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'r'
// file:///D:/jose/work/xsl/pdf.xsl:414
  private void _xsl_template_r(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    {
      Env _xsl_arg1 = XPath.createCall(env);
      _exprs[173].addVar(_xsl_arg1, "f", node, env);
      _xsl_macro_fig(out, node, _xsl_arg1);
      _xsl_arg1.free();
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'q'
// file:///D:/jose/work/xsl/pdf.xsl:419
  private void _xsl_template_q(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    {
      Env _xsl_arg1 = XPath.createCall(env);
      _exprs[174].addVar(_xsl_arg1, "f", node, env);
      _xsl_macro_fig(out, node, _xsl_arg1);
      _xsl_arg1.free();
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'k'
// file:///D:/jose/work/xsl/pdf.xsl:424
  private void _xsl_template_k(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    {
      Env _xsl_arg1 = XPath.createCall(env);
      _exprs[175].addVar(_xsl_arg1, "f", node, env);
      _xsl_macro_fig(out, node, _xsl_arg1);
      _xsl_arg1.free();
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }

  void _xsl_macro_fig(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    _exprs[176].addParam(env, "d", node, env);
    _exprs[177].addParam(env, "fig", node, env);
    _exprs[178].addParam(env, "style_name", node, env);
    _exprs[157].addParam(env, "style", node, env);
    _exprs[24].addParam(env, "color", node, env);
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 441);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
    XMLWriter _xsl_attr_0 = out.pushAttribute("font-family", _namespaces[1]);
    out.valueOf(_exprs[25].evalObject(node, env));
    out.popAttribute(_xsl_attr_0);
    XMLWriter _xsl_attr_1 = out.pushAttribute("font-size", _namespaces[1]);
    out.valueOf(_exprs[26].evalObject(node, env));
    out.print("pt");
    out.popAttribute(_xsl_attr_1);
    if (_exprs[27].evalBoolean(node, env)) {
      XMLWriter _xsl_attr_2 = out.pushAttribute("color", _namespaces[1]);
      out.print("black");
      out.popAttribute(_xsl_attr_2);
    }
    else {
      XMLWriter _xsl_attr_3 = out.pushAttribute("color", _namespaces[1]);
      out.valueOf(_exprs[28].evalObject(node, env));
      out.popAttribute(_xsl_attr_3);
    }
    if (_exprs[29].evalBoolean(node, env)) {
      XMLWriter _xsl_attr_4 = out.pushAttribute("font-weight", _namespaces[1]);
      out.print("bold");
      out.popAttribute(_xsl_attr_4);
    }
    else {
      XMLWriter _xsl_attr_5 = out.pushAttribute("font-weight", _namespaces[1]);
      out.print("normal");
      out.popAttribute(_xsl_attr_5);
    }
    if (_exprs[30].evalBoolean(node, env)) {
      XMLWriter _xsl_attr_6 = out.pushAttribute("font-style", _namespaces[1]);
      out.print("italic");
      out.popAttribute(_xsl_attr_6);
    }
    else {
      XMLWriter _xsl_attr_7 = out.pushAttribute("font-style", _namespaces[1]);
      out.print("normal");
      out.popAttribute(_xsl_attr_7);
    }
    out.valueOf(_exprs[179].evalObject(node, env));
    out.popElement();
  }

  // 'a'
// file:///D:/jose/work/xsl/pdf.xsl:463
  private void _xsl_template_a0(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    _xsl_loop0:
    for (Node _xsl_ptr1 = node.getFirstChild();
         _xsl_ptr1 != null;
         _xsl_ptr1 = _xsl_ptr1.getNextSibling()) {
      if (_xsl_ptr1.getNodeName() == "text" &&
          _xsl_ptr1 instanceof Element) {
        out.valueOf(_xsl_ptr1);
        break _xsl_loop0;
      }
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'result'
// file:///D:/jose/work/xsl/pdf.xsl:469
  private void _xsl_template_result(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    _exprs[180].addParam(env, "style", node, env);
    _exprs[24].addParam(env, "color", node, env);
    if (_exprs[22].evalBoolean(node, env)) {
      out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 474);
      out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "inline", "fo:inline");
      XMLWriter _xsl_attr_0 = out.pushAttribute("font-family", _namespaces[1]);
      out.valueOf(_exprs[25].evalObject(node, env));
      out.popAttribute(_xsl_attr_0);
      XMLWriter _xsl_attr_1 = out.pushAttribute("font-size", _namespaces[1]);
      out.valueOf(_exprs[26].evalObject(node, env));
      out.print("pt");
      out.popAttribute(_xsl_attr_1);
      if (_exprs[27].evalBoolean(node, env)) {
        XMLWriter _xsl_attr_2 = out.pushAttribute("color", _namespaces[1]);
        out.print("black");
        out.popAttribute(_xsl_attr_2);
      }
      else {
        XMLWriter _xsl_attr_3 = out.pushAttribute("color", _namespaces[1]);
        out.valueOf(_exprs[28].evalObject(node, env));
        out.popAttribute(_xsl_attr_3);
      }
      if (_exprs[29].evalBoolean(node, env)) {
        XMLWriter _xsl_attr_4 = out.pushAttribute("font-weight", _namespaces[1]);
        out.print("bold");
        out.popAttribute(_xsl_attr_4);
      }
      else {
        XMLWriter _xsl_attr_5 = out.pushAttribute("font-weight", _namespaces[1]);
        out.print("normal");
        out.popAttribute(_xsl_attr_5);
      }
      if (_exprs[30].evalBoolean(node, env)) {
        XMLWriter _xsl_attr_6 = out.pushAttribute("font-style", _namespaces[1]);
        out.print("italic");
        out.popAttribute(_xsl_attr_6);
      }
      else {
        XMLWriter _xsl_attr_7 = out.pushAttribute("font-style", _namespaces[1]);
        out.print("normal");
        out.popAttribute(_xsl_attr_7);
      }
      out.valueOf(node);
      out.popElement();
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'fen'
// file:///D:/jose/work/xsl/pdf.xsl:497
  private void _xsl_template_fen(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'depth'
// file:///D:/jose/work/xsl/pdf.xsl:498
  private void _xsl_template_depth0(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'diagram'
// file:///D:/jose/work/xsl/pdf.xsl:503
  private void _xsl_template_diagram(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    _exprs[181].addParam(env, "style", node, env);
    _exprs[24].addParam(env, "color", node, env);
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 509);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "table", "fo:table");
    out.attribute("table-layout", "fixed");
    out.attribute("width", "100%");
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 510);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "table-column", "fo:table-column");
    out.popElement();
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 511);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "table-body", "fo:table-body");
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 511);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "table-row", "fo:table-row");
    out.attribute("keep-together", "always");
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 511);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "table-cell", "fo:table-cell");
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 513);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "block", "fo:block");
    out.attribute("space-before", "-1em");
    out.attribute("space-after", "-0.0em");
    out.attribute("text-align", "center");
    XMLWriter _xsl_attr_0 = out.pushAttribute("font-family", _namespaces[1]);
    out.valueOf(_exprs[25].evalObject(node, env));
    out.popAttribute(_xsl_attr_0);
    XMLWriter _xsl_attr_1 = out.pushAttribute("font-size", _namespaces[1]);
    out.valueOf(_exprs[26].evalObject(node, env));
    out.print("pt");
    out.popAttribute(_xsl_attr_1);
    if (_exprs[27].evalBoolean(node, env)) {
      XMLWriter _xsl_attr_2 = out.pushAttribute("color", _namespaces[1]);
      out.print("black");
      out.popAttribute(_xsl_attr_2);
    }
    else {
      XMLWriter _xsl_attr_3 = out.pushAttribute("color", _namespaces[1]);
      out.valueOf(_exprs[28].evalObject(node, env));
      out.popAttribute(_xsl_attr_3);
    }
    XMLWriter _xsl_attr_4 = out.pushAttribute("font-weight", _namespaces[1]);
    out.print("normal");
    out.popAttribute(_xsl_attr_4);
    XMLWriter _xsl_attr_5 = out.pushAttribute("font-style", _namespaces[1]);
    out.print("normal");
    out.popAttribute(_xsl_attr_5);
    {
      Env _xsl_arg1 = XPath.createCall(env);
      for (Node _xsl_ptr6 = node.getFirstChild();
           _xsl_ptr6 != null;
           _xsl_ptr6 = _xsl_ptr6.getNextSibling()) {
        if (_xsl_ptr6.getNodeName() == "table" &&
            _xsl_ptr6 instanceof Element) {
          for (Node _xsl_ptr7 = _xsl_ptr6.getFirstChild();
               _xsl_ptr7 != null;
               _xsl_ptr7 = _xsl_ptr7.getNextSibling()) {
            if (_xsl_ptr7.getNodeName() == "tr" &&
                _xsl_ptr7 instanceof Element) {
              _xsl_arg1.setSelect(node, _select_patterns[4]);
              _xsl_arg1.setCurrentNode(_xsl_ptr7);
              applyNode(out, _xsl_ptr7, _xsl_arg1, 0, 2147483647);
            }
          }
        }
      }
      _xsl_arg1.free();
    }
    out.popElement();
    out.popElement();
    out.popElement();
    out.popElement();
    out.popElement();
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'tr'
// file:///D:/jose/work/xsl/pdf.xsl:532
  private void _xsl_template_tr(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 533);
    out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "block", "fo:block");
    out.attribute("line-height", "1em");
    {
      Env _xsl_arg1 = XPath.createCall(env);
      for (Node _xsl_ptr0 = node.getFirstChild();
           _xsl_ptr0 != null;
           _xsl_ptr0 = _xsl_ptr0.getNextSibling()) {
        if (_xsl_ptr0.getNodeName() == "td" &&
            _xsl_ptr0 instanceof Element) {
          _xsl_arg1.setSelect(node, _select_patterns[5]);
          _xsl_arg1.setCurrentNode(_xsl_ptr0);
          applyNode(out, _xsl_ptr0, _xsl_arg1, 0, 2147483647);
        }
      }
      _xsl_arg1.free();
    }
    out.popElement();
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'td'
// file:///D:/jose/work/xsl/pdf.xsl:539
  private void _xsl_template_td(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    if (_exprs[182].evalBoolean(node, env)) {
      out.setLocation("file:/D:/jose/work/xsl/pdf.xsl", "file:///D:/jose/work/xsl/pdf.xsl", 547);
      out.pushElement("http://www.w3.org/1999/XSL/Format", "fo", "leader", "fo:leader");
      out.attribute("leader-length", "1em");
      out.popElement();
    }
    else {
      _xsl_loop0:
      for (Node _xsl_ptr1 = node.getFirstChild();
           _xsl_ptr1 != null;
           _xsl_ptr1 = _xsl_ptr1.getNextSibling()) {
        if (_xsl_ptr1.getNodeName() == "char" &&
            _xsl_ptr1 instanceof Element) {
          out.valueOf(_xsl_ptr1);
          break _xsl_loop0;
        }
      }
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }

  protected void applyNode(XslWriter out, Node node, Env env, int _xsl_min, int _xsl_max)
    throws Exception
  {
    Object _xsl_tmp;

    switch (getTemplateId(_static_templates, node, env, _xsl_min, _xsl_max)) {
    case 1:
      _xsl_template_head(out, node, env);
      break;
    case 2:
      _xsl_template_(out, node, env);
      break;
    case 3:
      _xsl_template_game(out, node, env);
      break;
    case 4:
      _xsl_template_body(out, node, env);
      break;
    case 5:
      _xsl_template_v(out, node, env);
      break;
    case 6:
      _xsl_template_depth(out, node, env);
      break;
    case 7:
      _xsl_template_m(out, node, env);
      break;
    case 8:
      _xsl_template_c(out, node, env);
      break;
    case 9:
      _xsl_template_bold(out, node, env);
      break;
    case 10:
      _xsl_template_italic(out, node, env);
      break;
    case 11:
      _xsl_template_underline(out, node, env);
      break;
    case 12:
      _xsl_template_center(out, node, env);
      break;
    case 13:
      _xsl_template_right(out, node, env);
      break;
    case 14:
      _xsl_template_font(out, node, env);
      break;
    case 15:
      _xsl_template_br(out, node, env);
      break;
    case 16:
      _xsl_template_a(out, node, env);
      break;
    case 17:
      _xsl_template_n(out, node, env);
      break;
    case 18:
      _xsl_template_b(out, node, env);
      break;
    case 19:
      _xsl_template_r(out, node, env);
      break;
    case 20:
      _xsl_template_q(out, node, env);
      break;
    case 21:
      _xsl_template_k(out, node, env);
      break;
    case 22:
      _xsl_template_a0(out, node, env);
      break;
    case 23:
      _xsl_template_result(out, node, env);
      break;
    case 24:
      _xsl_template_fen(out, node, env);
      break;
    case 25:
      _xsl_template_depth0(out, node, env);
      break;
    case 26:
      _xsl_template_diagram(out, node, env);
      break;
    case 27:
      _xsl_template_tr(out, node, env);
      break;
    case 28:
      _xsl_template_td(out, node, env);
      break;
    default:
      switch (node.getNodeType()) {
      case Node.ELEMENT_NODE:
      case Node.DOCUMENT_NODE:
      case Node.DOCUMENT_FRAGMENT_NODE:
        env.setSelect(node, null);
        for (Node child = node.getFirstChild();
             child != null;
             child = child.getNextSibling()) {
          env.setCurrentNode(child);
          applyNode(out, child, env, 0, 2147483647);
        }
        break;
      default:
        applyNodeDefault(out, node, env);
        break;
      }
      break;
    }
  }

  static HashMap _static_templates;

  static {
    _static_templates = new HashMap();
    Template []values;
    try {
      Template []star = new Template[] {
        new Template(XPath.parseMatch("/").getPattern(), "", 0, 2, 0.5, 1, "_xsl_template_", 2),
      };

      _static_templates.put("*", star);
      _init_templates_0(star);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
  private static void _init_templates_0(Template []star)
    throws Exception
  {
    _static_templates.put("k", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("k").getPattern(), "", 0, 2, 0.0, 20, "_xsl_template_k", 21),
    }));
    _static_templates.put("game", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("game").getPattern(), "", 0, 2, 0.0, 2, "_xsl_template_game", 3),
    }));
    _static_templates.put("c", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("c").getPattern(), "", 0, 2, 0.0, 7, "_xsl_template_c", 8),
    }));
    _static_templates.put("fen", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("fen").getPattern(), "", 0, 2, 0.0, 23, "_xsl_template_fen", 24),
    }));
    _static_templates.put("q", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("q").getPattern(), "", 0, 2, 0.0, 19, "_xsl_template_q", 20),
    }));
    _static_templates.put("tr", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("tr").getPattern(), "", 0, 2, 0.0, 26, "_xsl_template_tr", 27),
    }));
    _static_templates.put("v", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("v").getPattern(), "", 0, 2, 0.0, 4, "_xsl_template_v", 5),
    }));
    _static_templates.put("font", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("font").getPattern(), "", 0, 2, 0.0, 13, "_xsl_template_font", 14),
    }));
    _static_templates.put("td", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("td").getPattern(), "", 0, 2, 0.0, 27, "_xsl_template_td", 28),
    }));
    _static_templates.put("a", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("a").getPattern(), "", 0, 2, 0.0, 21, "_xsl_template_a0", 22),
        new Template(XPath.parseMatch("a").getPattern(), "", 0, 2, 0.0, 15, "_xsl_template_a", 16),
    }));
    _static_templates.put("italic", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("italic").getPattern(), "", 0, 2, 0.0, 9, "_xsl_template_italic", 10),
    }));
    _static_templates.put("center", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("center").getPattern(), "", 0, 2, 0.0, 11, "_xsl_template_center", 12),
    }));
    _static_templates.put("diagram", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("diagram").getPattern(), "", 0, 2, 0.0, 25, "_xsl_template_diagram", 26),
    }));
    _static_templates.put("body", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("body").getPattern(), "", 0, 2, 0.0, 3, "_xsl_template_body", 4),
    }));
    _static_templates.put("right", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("right").getPattern(), "", 0, 2, 0.0, 12, "_xsl_template_right", 13),
    }));
    _static_templates.put("r", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("r").getPattern(), "", 0, 2, 0.0, 18, "_xsl_template_r", 19),
    }));
    _static_templates.put("depth", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("depth").getPattern(), "", 0, 2, 0.0, 24, "_xsl_template_depth0", 25),
        new Template(XPath.parseMatch("depth").getPattern(), "", 0, 2, 0.0, 5, "_xsl_template_depth", 6),
    }));
    _static_templates.put("b", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("b").getPattern(), "", 0, 2, 0.0, 17, "_xsl_template_b", 18),
    }));
    _static_templates.put("m", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("m").getPattern(), "", 0, 2, 0.0, 6, "_xsl_template_m", 7),
    }));
    _static_templates.put("bold", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("bold").getPattern(), "", 0, 2, 0.0, 8, "_xsl_template_bold", 9),
    }));
    _static_templates.put("result", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("result").getPattern(), "", 0, 2, 0.0, 22, "_xsl_template_result", 23),
    }));
    _static_templates.put("head", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("head").getPattern(), "", 1, 1, 0.0, 0, "_xsl_template_head", 1),
    }));
    _static_templates.put("underline", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("underline").getPattern(), "", 0, 2, 0.0, 10, "_xsl_template_underline", 11),
    }));
    _static_templates.put("br", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("br").getPattern(), "", 0, 2, 0.0, 14, "_xsl_template_br", 15),
    }));
    _static_templates.put("n", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("n").getPattern(), "", 0, 2, 0.0, 16, "_xsl_template_n", 17),
    }));
  }
  private void _xsl_init_vars(XslWriter out, Node node, Env env)
    throws Exception
  {
    out.addNamespace("fox", "http://xml.apache.org/fop/extensions");
    out.addNamespace("jose", "http://jose-chess.sourceforge.net/xsl-info");
    Object _xsl_tmp;
    if (out.getParameter("styles") != null)
      env.setGlobal("styles", out.getParameter("styles"));
    else {
      env.setGlobal("styles", _exprs[183].evalObject(node, env));
    }
    if (out.getParameter("styles") != null)
      env.setGlobal("styles", out.getParameter("styles"));
    else {
      env.setGlobal("styles", _exprs[184].evalObject(node, env));
    }
    if (out.getParameter("inline") != null)
      env.setGlobal("inline", out.getParameter("inline"));
    else {
      env.setGlobal("inline", _exprs[185].evalObject(node, env));
    }
    com.caucho.vfs.Path pwd;
    pwd = (com.caucho.vfs.Path) out.getProperty("caucho.pwd");
  }
  protected void _xsl_init(XslWriter out, Node node, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    _xsl_init_vars(out, node, env);
  }
  public boolean isModified()
  {
    return com.caucho.util.CauchoSystem.getVersionId() != -8852640556211195023L ||
           super.isModified();
  }
  public void init(com.caucho.vfs.Path path)
    throws Exception
  {
    super.init(path);
    com.caucho.vfs.Path pwd = path.getParent();
    addDepend(new com.caucho.vfs.Depend(pwd.lookup("/D:/jose/work/xsl/pdf.xsl"), -8858379889433652262L));
    addDepend(new com.caucho.vfs.Depend(pwd.lookup("/D:/jose/work/xsl/pdf_header.xsl"), -1073284825038279152L));
    stylesheets = new StylesheetEnv[2];
    StylesheetEnv env;
    env = new StylesheetEnv();
    stylesheets[0] = env;
    env.setPath(pwd.lookup("pdf_header.xsl"));
    env = new StylesheetEnv();
    stylesheets[1] = env;
    env.setPath(pwd.lookup("file:///D:/jose/work/xsl/pdf.xsl"));
    _output.put("encoding", "UTF-8");
    _output.put("indent", "no");
    _output.put("method", "xml");
    _output.put("version", "1.0");
    ArrayList params = new ArrayList();
    params.add("styles");
    params.add("styles");
    params.add("inline");
    setProperty("caucho.global.param", params);
    _namespaces = new NamespaceContext[] { 
      new NamespaceContext(new NamespaceContext(new NamespaceContext(new NamespaceContext(new NamespaceContext(null, "xsl", "http://www.w3.org/1999/XSL/Transform"), "fo", "http://www.w3.org/1999/XSL/Format"), "fox", "http://xml.apache.org/fop/extensions"), "xsl", "http://www.w3.org/1999/XSL/Transform"), "fo", "http://www.w3.org/1999/XSL/Format"),
      new NamespaceContext(new NamespaceContext(new NamespaceContext(null, "xsl", "http://www.w3.org/1999/XSL/Transform"), "fo", "http://www.w3.org/1999/XSL/Format"), "fox", "http://xml.apache.org/fop/extensions"),
    };

    com.caucho.xsl.fun.KeyFun keyFun = new com.caucho.xsl.fun.KeyFun();
    addFunction("key", keyFun);

    com.caucho.xsl.fun.FormatNumberFun formatFun = new com.caucho.xsl.fun.FormatNumberFun();
    java.text.DecimalFormatSymbols symbols;
    addFunction("format-number", formatFun);
  }
  private static Expr []_exprs;
  static {
    try {
      _exprs = new Expr[] { 
        XPath.parseExpr("((((($isEvent or $isEventDate) or $isSite) or $isDate) or $isRound) or $isBoard)"),
        XPath.parseExpr("$isEvent"),
        XPath.parseExpr("$isEventDate"),
        XPath.parseExpr("((($isSite or $isDate) or $isRound) or $isBoard)"),
        XPath.parseExpr("$isSite"),
        XPath.parseExpr("$isDate"),
        XPath.parseExpr("($isRound or $isBoard)"),
        XPath.parseExpr("$isRound"),
        XPath.parseExpr("$isBoard"),
        XPath.parseExpr("(($isWhite or $isBlack) or $isResult)"),
        XPath.parseExpr("$isWhite"),
        XPath.parseExpr("$isBlack"),
        XPath.parseExpr("$isResult"),
        XPath.parseExpr("($isECO or $isOpening)"),
        XPath.parseExpr("($isECO and $isOpening)"),
        XPath.parseExpr("$isAnnotator"),
        XPath.parseExpr("(/descendant::bookmarks = 'true')"),
        XPath.parseExpr("(string-length($prefix) > 0.0)"),
        XPath.parseExpr("(string-length($suffix) > 0.0)"),
        XPath.parseExpr("@size"),
        XPath.parseExpr("@color"),
        XPath.parseExpr("@face"),
        XPath.parseExpr("(. != '*')"),
        XPath.parseExpr("($styles)/descendant::style[(name = 'header')]"),
        XPath.parseExpr("($style)/a[(key = 'foreground')]/value"),
        XPath.parseExpr("($style)/a[(key = 'family')]/value"),
        XPath.parseExpr("($style)/a[(key = 'size')]/value"),
        XPath.parseExpr("(string-length($color) = 0.0)"),
        XPath.parseExpr("$color"),
        XPath.parseExpr("(($style)/a[(key = 'bold')]/value = 'true')"),
        XPath.parseExpr("(($style)/a[(key = 'italic')]/value = 'true')"),
        XPath.parseExpr("."),
        XPath.parseExpr("($head)/tag[(key = 'Event')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'EventDate')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'Site')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'Date')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'Round')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'Board')]/value"),
        XPath.parseExpr("($styles)/descendant::style[(name = 'header.event')]"),
        XPath.parseExpr("($styles)/descendant::style[(name = 'header.site')]"),
        XPath.parseExpr("($styles)/descendant::style[(name = 'header.date')]"),
        XPath.parseExpr("($styles)/descendant::style[(name = 'header.round')]"),
        XPath.parseExpr("($event_style)/a[(key = 'foreground')]/value"),
        XPath.parseExpr("($site_style)/a[(key = 'foreground')]/value"),
        XPath.parseExpr("($date_style)/a[(key = 'foreground')]/value"),
        XPath.parseExpr("($round_style)/a[(key = 'foreground')]/value"),
        XPath.parseExpr("((string-length($Event) > 0.0) and ($Event != '-'))"),
        XPath.parseExpr("((string-length($EventDate) > 0.0) and ($EventDate != '-'))"),
        XPath.parseExpr("((string-length($Site) > 0.0) and ($Site != '-'))"),
        XPath.parseExpr("((string-length($Date) > 0.0) and ($Date != '-'))"),
        XPath.parseExpr("((string-length($Round) > 0.0) and ($Round != '-'))"),
        XPath.parseExpr("((string-length($Board) > 0.0) and ($Board != '-'))"),
        XPath.parseExpr("($event_style)/a[(key = 'family')]/value"),
        XPath.parseExpr("($event_style)/a[(key = 'size')]/value"),
        XPath.parseExpr("(string-length($event_color) = 0.0)"),
        XPath.parseExpr("$event_color"),
        XPath.parseExpr("(($event_style)/a[(key = 'bold')]/value = 'true')"),
        XPath.parseExpr("(($event_style)/a[(key = 'italic')]/value = 'true')"),
        XPath.parseExpr("$Event"),
        XPath.parseExpr("$EventDate"),
        XPath.parseExpr("($site_style)/a[(key = 'family')]/value"),
        XPath.parseExpr("($site_style)/a[(key = 'size')]/value"),
        XPath.parseExpr("(string-length($site_color) = 0.0)"),
        XPath.parseExpr("$site_color"),
        XPath.parseExpr("(($site_style)/a[(key = 'bold')]/value = 'true')"),
        XPath.parseExpr("(($site_style)/a[(key = 'italic')]/value = 'true')"),
        XPath.parseExpr("$Site"),
        XPath.parseExpr("($date_style)/a[(key = 'family')]/value"),
        XPath.parseExpr("($date_style)/a[(key = 'size')]/value"),
        XPath.parseExpr("(string-length($date_color) = 0.0)"),
        XPath.parseExpr("$date_color"),
        XPath.parseExpr("(($date_style)/a[(key = 'bold')]/value = 'true')"),
        XPath.parseExpr("(($date_style)/a[(key = 'italic')]/value = 'true')"),
        XPath.parseExpr("$Date"),
        XPath.parseExpr("($round_style)/a[(key = 'family')]/value"),
        XPath.parseExpr("($round_style)/a[(key = 'size')]/value"),
        XPath.parseExpr("(string-length($round_color) = 0.0)"),
        XPath.parseExpr("$round_color"),
        XPath.parseExpr("(($round_style)/a[(key = 'bold')]/value = 'true')"),
        XPath.parseExpr("(($round_style)/a[(key = 'italic')]/value = 'true')"),
        XPath.parseExpr("($head)/tag[(key = 'Round')]/text"),
        XPath.parseExpr("$Round"),
        XPath.parseExpr("($head)/tag[(key = 'Board')]/text"),
        XPath.parseExpr("$Board"),
        XPath.parseExpr("($head)/tag[(key = 'White')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'Black')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'WhiteTitle')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'BlackTitle')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'WhiteELO')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'BlackELO')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'Result')]/value"),
        XPath.parseExpr("((string-length($White) > 0.0) and ($White != '-'))"),
        XPath.parseExpr("((string-length($WhiteTitle) > 0.0) and ($WhiteTitle != '-'))"),
        XPath.parseExpr("((string-length($WhiteELO) > 0.0) and ($WhiteELO != '-'))"),
        XPath.parseExpr("((string-length($Black) > 0.0) and ($Black != '-'))"),
        XPath.parseExpr("((string-length($BlackTitle) > 0.0) and ($BlackTitle != '-'))"),
        XPath.parseExpr("((string-length($BlackELO) > 0.0) and ($BlackELO != '-'))"),
        XPath.parseExpr("(((string-length($Result) > 0.0) and ($Result != '-')) and ($Result != '*'))"),
        XPath.parseExpr("($styles)/descendant::style[(name = 'header.white')]"),
        XPath.parseExpr("($styles)/descendant::style[(name = 'header.black')]"),
        XPath.parseExpr("($styles)/descendant::style[(name = 'header.result')]"),
        XPath.parseExpr("($white_style)/a[(key = 'foreground')]/value"),
        XPath.parseExpr("($black_style)/a[(key = 'foreground')]/value"),
        XPath.parseExpr("($result_style)/a[(key = 'foreground')]/value"),
        XPath.parseExpr("($white_style)/a[(key = 'family')]/value"),
        XPath.parseExpr("($white_style)/a[(key = 'size')]/value"),
        XPath.parseExpr("(string-length($white_color) = 0.0)"),
        XPath.parseExpr("$white_color"),
        XPath.parseExpr("(($white_style)/a[(key = 'bold')]/value = 'true')"),
        XPath.parseExpr("(($white_style)/a[(key = 'italic')]/value = 'true')"),
        XPath.parseExpr("$White"),
        XPath.parseExpr("($black_style)/a[(key = 'family')]/value"),
        XPath.parseExpr("($black_style)/a[(key = 'size')]/value"),
        XPath.parseExpr("(string-length($black_color) = 0.0)"),
        XPath.parseExpr("$black_color"),
        XPath.parseExpr("(($black_style)/a[(key = 'bold')]/value = 'true')"),
        XPath.parseExpr("(($black_style)/a[(key = 'italic')]/value = 'true')"),
        XPath.parseExpr("$Black"),
        XPath.parseExpr("($result_style)/a[(key = 'family')]/value"),
        XPath.parseExpr("($result_style)/a[(key = 'size')]/value"),
        XPath.parseExpr("(string-length($result_color) = 0.0)"),
        XPath.parseExpr("$result_color"),
        XPath.parseExpr("(($result_style)/a[(key = 'bold')]/value = 'true')"),
        XPath.parseExpr("(($result_style)/a[(key = 'italic')]/value = 'true')"),
        XPath.parseExpr("$Result"),
        XPath.parseExpr("($head)/tag[(key = 'ECO')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'Opening')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'Annotator')]/value"),
        XPath.parseExpr("((string-length($ECO) > 0.0) and ($ECO != '-'))"),
        XPath.parseExpr("((string-length($Opening) > 0.0) and ($Opening != '-'))"),
        XPath.parseExpr("((string-length($Annotator) > 0.0) and ($Annotator != '-'))"),
        XPath.parseExpr("$ECO"),
        XPath.parseExpr("$Opening"),
        XPath.parseExpr("($head)/tag[(key = 'Annotator')]/text"),
        XPath.parseExpr("$Annotator"),
        XPath.parseExpr("/descendant::style[(name = 'body.line.0')]"),
        XPath.parseExpr("/descendant::page/width"),
        XPath.parseExpr("/descendant::page/height"),
        XPath.parseExpr("/descendant::page/margin-top"),
        XPath.parseExpr("/descendant::page/margin-bottom"),
        XPath.parseExpr("/descendant::page/margin-left"),
        XPath.parseExpr("/descendant::page/margin-right"),
        XPath.parseExpr("$header_extent"),
        XPath.parseExpr("$footer_extent"),
        XPath.parseExpr("$column-count"),
        XPath.parseExpr("position()"),
        XPath.parseExpr("head/tag[(key = 'White')]/value"),
        XPath.parseExpr("head/tag[(key = 'Black')]/value"),
        XPath.parseExpr("head/tag[(key = 'Site')]/value"),
        XPath.parseExpr("head/tag[(key = 'Date')]/value"),
        XPath.parseExpr("($pgno_style)/a[(key = 'family')]/value"),
        XPath.parseExpr("($pgno_style)/a[(key = 'size')]/value"),
        XPath.parseExpr("$language"),
        XPath.parseExpr("($styles)/descendant::style[(name = 'body.comment.4')]/a[(key = 'family')]/value"),
        XPath.parseExpr("($styles)/descendant::style[(name = 'body.comment.4')]/a[(key = 'size')]/value"),
        XPath.parseExpr("($styles)/descendant::style[(name = 'body.comment.4')]/a[(key = 'foreground')]/value"),
        XPath.parseExpr("concat('body.line.', depth)"),
        XPath.parseExpr("($styles)/descendant::style[(name = $style_name)]"),
        XPath.parseExpr("($style)/a[(key = 'variation.prefix')]/value"),
        XPath.parseExpr("($style)/a[(key = 'variation.suffix')]/value"),
        XPath.parseExpr("(depth = 0.0)"),
        XPath.parseExpr("$prefix"),
        XPath.parseExpr("$suffix"),
        XPath.parseExpr("(depth = 1.0)"),
        XPath.parseExpr("concat('body.comment.', ../depth)"),
        XPath.parseExpr("number(substring(@size,1.0,(string-length(@size) - 1.0)))"),
        XPath.parseExpr("round((100.0 + $percent))"),
        XPath.parseExpr("(count(sym) > 0.0)"),
        XPath.parseExpr("sym"),
        XPath.parseExpr("($styles)/descendant::style[(name = 'body.symbol')]"),
        XPath.parseExpr("$sym"),
        XPath.parseExpr("'n'"),
        XPath.parseExpr("'b'"),
        XPath.parseExpr("'r'"),
        XPath.parseExpr("'q'"),
        XPath.parseExpr("'k'"),
        XPath.parseExpr("number(../../depth)"),
        XPath.parseExpr("/descendant::figurines/fig[((position() = (1.0 + $d)) or (position() = 5.0))]"),
        XPath.parseExpr("concat('body.figurine.', $d)"),
        XPath.parseExpr("($fig)/string[(key = $f)]/value"),
        XPath.parseExpr("($styles)/descendant::style[(name = 'body.result')]"),
        XPath.parseExpr("($styles)/descendant::style[(name = 'body.inline')]"),
        XPath.parseExpr("(char = ' ')"),
        XPath.parseExpr("../../styles"),
        XPath.parseExpr("/descendant::styles"),
        XPath.parseExpr("/descendant::figurines/inline"),
      };
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
  private static com.caucho.xpath.pattern.AbstractPattern []_select_patterns;
  private static com.caucho.xpath.pattern.AbstractPattern []_match_patterns;
  static {
    try {
      _select_patterns = new com.caucho.xpath.pattern.AbstractPattern[] { 
        XPath.parseSelect("/descendant::game").getPattern(),
        XPath.parseSelect("head").getPattern(),
        XPath.parseSelect("diagram").getPattern(),
        XPath.parseSelect("body").getPattern(),
        XPath.parseSelect("table/tr").getPattern(),
        XPath.parseSelect("td").getPattern(),
      };
      _match_patterns = new com.caucho.xpath.pattern.AbstractPattern[] { 
      };
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}
