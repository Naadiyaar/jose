/*
 * Generated by Resin-3.0.14 (built Tue, 05 Jul 2005 11:03:36 PDT)
 */

package _xsl._file_23a._d_23a._jose._work._xsl;

import java.io.*;
import java.util.*;
import org.w3c.dom.*;
import org.xml.sax.*;
import com.caucho.util.*;
import com.caucho.xml.*;
import com.caucho.xpath.*;
import com.caucho.xpath.expr.*;
import com.caucho.xpath.pattern.*;
import com.caucho.xsl.*;
import javax.servlet.*;
import javax.servlet.jsp.*;
import javax.servlet.http.*;

public class _text__xsl extends JavaStylesheet {
  private StylesheetEnv stylesheets[];

  // 'jose-export'
// text_header.xsl:5
  private void _xsl_template_joseexport(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[0]);
    out.print("\n	");
    {
      Env _xsl_arg1 = XPath.createCall(env);
      for (Node _xsl_ptr0 = node.getFirstChild();
           _xsl_ptr0 != null;
           _xsl_ptr0 = _xsl_ptr0.getNextSibling()) {
        if (_xsl_ptr0.getNodeName() == "game" &&
            _xsl_ptr0 instanceof Element) {
          for (Node _xsl_ptr1 = _xsl_ptr0.getFirstChild();
               _xsl_ptr1 != null;
               _xsl_ptr1 = _xsl_ptr1.getNextSibling()) {
            if (_xsl_ptr1.getNodeName() == "head" &&
                _xsl_ptr1 instanceof Element) {
              _xsl_arg1.setSelect(node, _select_patterns[0]);
              _xsl_arg1.setCurrentNode(_xsl_ptr1);
              applyNode(out, _xsl_ptr1, _xsl_arg1, 0, 2147483647);
            }
          }
        }
      }
      _xsl_arg1.free();
    }
    out.print("\n	");
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'head'
// text_header.xsl:13
  private void _xsl_template_head(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[0]);
    {
      Env _xsl_arg1 = XPath.createCall(env);
      _exprs[18].addVar(_xsl_arg1, "head", node, env);
      _xsl_macro_first_ncheader_ncline(out, node, _xsl_arg1);
      _xsl_arg1.free();
    }
    {
      Env _xsl_arg1 = XPath.createCall(env);
      _exprs[18].addVar(_xsl_arg1, "head", node, env);
      _xsl_macro_second_ncheader_ncline(out, node, _xsl_arg1);
      _xsl_arg1.free();
    }
    {
      Env _xsl_arg1 = XPath.createCall(env);
      _exprs[18].addVar(_xsl_arg1, "head", node, env);
      _xsl_macro_third_ncheader_ncline(out, node, _xsl_arg1);
      _xsl_arg1.free();
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }

  void _xsl_macro_first_ncheader_ncline(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    _exprs[19].addParam(env, "Event", node, env);
    _exprs[20].addParam(env, "EventDate", node, env);
    _exprs[21].addParam(env, "Site", node, env);
    _exprs[22].addParam(env, "Date", node, env);
    _exprs[23].addParam(env, "Round", node, env);
    _exprs[24].addParam(env, "Board", node, env);
    _exprs[25].addParam(env, "isEvent", node, env);
    _exprs[26].addParam(env, "isEventDate", node, env);
    _exprs[27].addParam(env, "isSite", node, env);
    _exprs[28].addParam(env, "isDate", node, env);
    _exprs[29].addParam(env, "isRound", node, env);
    _exprs[30].addParam(env, "isBoard", node, env);
    if (_exprs[0].evalBoolean(node, env)) {
      if (_exprs[1].evalBoolean(node, env)) {
        out.valueOf(_exprs[31].evalObject(node, env));
        if (_exprs[2].evalBoolean(node, env)) {
          out.print(" (");
          out.valueOf(_exprs[32].evalObject(node, env));
          out.print(") ");
        }
        if (_exprs[3].evalBoolean(node, env)) {
          out.print(", ");
        }
      }
      if (_exprs[4].evalBoolean(node, env)) {
        out.valueOf(_exprs[33].evalObject(node, env));
        if (_exprs[5].evalBoolean(node, env)) {
          out.print(" ");
        }
        else if (_exprs[6].evalBoolean(node, env)) {
          out.print(", ");
        }
      }
      if (_exprs[5].evalBoolean(node, env)) {
        out.valueOf(_exprs[34].evalObject(node, env));
        if (_exprs[6].evalBoolean(node, env)) {
          out.print(", ");
        }
      }
      if (_exprs[6].evalBoolean(node, env)) {
        if (_exprs[7].evalBoolean(node, env)) {
          out.valueOf(_exprs[35].evalObject(node, env));
          out.print(": ");
          out.valueOf(_exprs[36].evalObject(node, env));
          if (_exprs[8].evalBoolean(node, env)) {
            out.print(", ");
          }
        }
        if (_exprs[8].evalBoolean(node, env)) {
          out.valueOf(_exprs[37].evalObject(node, env));
          out.print(": ");
          out.valueOf(_exprs[38].evalObject(node, env));
        }
      }
      out.print("\n");
    }
  }
  void _xsl_macro_second_ncheader_ncline(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    _exprs[39].addParam(env, "White", node, env);
    _exprs[40].addParam(env, "WhiteTitle", node, env);
    _exprs[41].addParam(env, "WhiteELO", node, env);
    _exprs[42].addParam(env, "Black", node, env);
    _exprs[43].addParam(env, "BlackTitle", node, env);
    _exprs[44].addParam(env, "BlackELO", node, env);
    _exprs[45].addParam(env, "Result", node, env);
    _exprs[46].addParam(env, "isWhite", node, env);
    _exprs[47].addParam(env, "isWhiteTitle", node, env);
    _exprs[48].addParam(env, "isWhiteELO", node, env);
    _exprs[49].addParam(env, "isBlack", node, env);
    _exprs[50].addParam(env, "isBlackTitle", node, env);
    _exprs[51].addParam(env, "isBlackELO", node, env);
    _exprs[52].addParam(env, "isResult", node, env);
    if (_exprs[9].evalBoolean(node, env)) {
      if (_exprs[10].evalBoolean(node, env)) {
        out.valueOf(_exprs[53].evalObject(node, env));
        out.valueOf(_exprs[54].evalObject(node, env));
        if (_exprs[11].evalBoolean(node, env)) {
          out.print(" (");
          out.valueOf(_exprs[55].evalObject(node, env));
          out.print(") ");
        }
        if (_exprs[12].evalBoolean(node, env)) {
          out.print(" - ");
        }
      }
      if (_exprs[12].evalBoolean(node, env)) {
        out.valueOf(_exprs[56].evalObject(node, env));
        out.print(" ");
        out.valueOf(_exprs[57].evalObject(node, env));
        if (_exprs[13].evalBoolean(node, env)) {
          out.print(" (");
          out.valueOf(_exprs[58].evalObject(node, env));
          out.print(") ");
        }
      }
      if (_exprs[14].evalBoolean(node, env)) {
        out.print(" ");
        out.valueOf(_exprs[59].evalObject(node, env));
      }
      out.print("\n");
    }
  }
  void _xsl_macro_third_ncheader_ncline(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    _exprs[60].addParam(env, "ECO", node, env);
    _exprs[61].addParam(env, "Opening", node, env);
    _exprs[62].addParam(env, "Annotator", node, env);
    _exprs[63].addParam(env, "isECO", node, env);
    _exprs[64].addParam(env, "isOpening", node, env);
    _exprs[65].addParam(env, "isAnnotator", node, env);
    if (_exprs[15].evalBoolean(node, env)) {
      out.valueOf(_exprs[66].evalObject(node, env));
      out.print(" ");
      out.valueOf(_exprs[67].evalObject(node, env));
      out.setLocation("file:/D:/jose/work/xsl/text_header.xsl", "text_header.xsl", 153);
      out.pushElement("", null, "br", "br");
      out.popElement();
    }
    if (_exprs[16].evalBoolean(node, env)) {
      out.print("\n");
      out.valueOf(_exprs[68].evalObject(node, env));
      out.print(": ");
      out.valueOf(_exprs[69].evalObject(node, env));
      out.print("\n");
    }
    out.print("\n");
  }

  // 'body'
// text_body.xsl:6
  private void _xsl_template_body(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    {
      Env _xsl_arg1 = XPath.createCall(env);
      for (Node _xsl_node = node.getFirstChild();
           _xsl_node != null;
           _xsl_node = _xsl_node.getNextSibling()) {
        _xsl_arg1.setSelect(node, null);
        _xsl_arg1.setCurrentNode(_xsl_node);
        applyNode(out, _xsl_node, _xsl_arg1, 0, 2147483647);
      }
      _xsl_arg1.free();
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'v'
// text_body.xsl:11
  private void _xsl_template_v(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    _exprs[70].addParam(env, "style", node, env);
    _exprs[71].addParam(env, "prefix", node, env);
    _exprs[72].addParam(env, "suffix", node, env);
    _exprs[73].addParam(env, "newline", node, env);
    if (_exprs[74].evalBoolean(node, env)) {
      out.print("\n");
      out.valueOf(_exprs[75].evalObject(node, env));
      {
        Env _xsl_arg1 = XPath.createCall(env);
        for (Node _xsl_node = node.getFirstChild();
             _xsl_node != null;
             _xsl_node = _xsl_node.getNextSibling()) {
          _xsl_arg1.setSelect(node, null);
          _xsl_arg1.setCurrentNode(_xsl_node);
          applyNode(out, _xsl_node, _xsl_arg1, 0, 2147483647);
        }
        _xsl_arg1.free();
      }
      out.valueOf(_exprs[76].evalObject(node, env));
      out.print("\n");
    }
    else {
      out.valueOf(_exprs[75].evalObject(node, env));
      {
        Env _xsl_arg1 = XPath.createCall(env);
        for (Node _xsl_node = node.getFirstChild();
             _xsl_node != null;
             _xsl_node = _xsl_node.getNextSibling()) {
          _xsl_arg1.setSelect(node, null);
          _xsl_arg1.setCurrentNode(_xsl_node);
          applyNode(out, _xsl_node, _xsl_arg1, 0, 2147483647);
        }
        _xsl_arg1.free();
      }
      out.valueOf(_exprs[76].evalObject(node, env));
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'depth'
// text_body.xsl:35
  private void _xsl_template_depth(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'a'
// text_body.xsl:39
  private void _xsl_template_a(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    _xsl_loop0:
    for (Node _xsl_ptr1 = node.getFirstChild();
         _xsl_ptr1 != null;
         _xsl_ptr1 = _xsl_ptr1.getNextSibling()) {
      if (_xsl_ptr1.getNodeName() == "text" &&
          _xsl_ptr1 instanceof Element) {
        out.valueOf(_xsl_ptr1);
        break _xsl_loop0;
      }
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'c'
// text_body.xsl:44
  private void _xsl_template_c(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    out.print(" { ");
    {
      Env _xsl_arg1 = XPath.createCall(env);
      for (Node _xsl_node = node.getFirstChild();
           _xsl_node != null;
           _xsl_node = _xsl_node.getNextSibling()) {
        _xsl_arg1.setSelect(node, null);
        _xsl_arg1.setCurrentNode(_xsl_node);
        applyNode(out, _xsl_node, _xsl_arg1, 0, 2147483647);
      }
      _xsl_arg1.free();
    }
    out.print(" } ");
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'bold'
// text_body.xsl:50
  private void _xsl_template_bold(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    {
      Env _xsl_arg1 = XPath.createCall(env);
      for (Node _xsl_node = node.getFirstChild();
           _xsl_node != null;
           _xsl_node = _xsl_node.getNextSibling()) {
        _xsl_arg1.setSelect(node, null);
        _xsl_arg1.setCurrentNode(_xsl_node);
        applyNode(out, _xsl_node, _xsl_arg1, 0, 2147483647);
      }
      _xsl_arg1.free();
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'italic'
// text_body.xsl:53
  private void _xsl_template_italic(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    {
      Env _xsl_arg1 = XPath.createCall(env);
      for (Node _xsl_node = node.getFirstChild();
           _xsl_node != null;
           _xsl_node = _xsl_node.getNextSibling()) {
        _xsl_arg1.setSelect(node, null);
        _xsl_arg1.setCurrentNode(_xsl_node);
        applyNode(out, _xsl_node, _xsl_arg1, 0, 2147483647);
      }
      _xsl_arg1.free();
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'underline'
// text_body.xsl:56
  private void _xsl_template_underline(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    {
      Env _xsl_arg1 = XPath.createCall(env);
      for (Node _xsl_node = node.getFirstChild();
           _xsl_node != null;
           _xsl_node = _xsl_node.getNextSibling()) {
        _xsl_arg1.setSelect(node, null);
        _xsl_arg1.setCurrentNode(_xsl_node);
        applyNode(out, _xsl_node, _xsl_arg1, 0, 2147483647);
      }
      _xsl_arg1.free();
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'center'
// text_body.xsl:59
  private void _xsl_template_center(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    {
      Env _xsl_arg1 = XPath.createCall(env);
      for (Node _xsl_node = node.getFirstChild();
           _xsl_node != null;
           _xsl_node = _xsl_node.getNextSibling()) {
        _xsl_arg1.setSelect(node, null);
        _xsl_arg1.setCurrentNode(_xsl_node);
        applyNode(out, _xsl_node, _xsl_arg1, 0, 2147483647);
      }
      _xsl_arg1.free();
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'right'
// text_body.xsl:62
  private void _xsl_template_right(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    {
      Env _xsl_arg1 = XPath.createCall(env);
      for (Node _xsl_node = node.getFirstChild();
           _xsl_node != null;
           _xsl_node = _xsl_node.getNextSibling()) {
        _xsl_arg1.setSelect(node, null);
        _xsl_arg1.setCurrentNode(_xsl_node);
        applyNode(out, _xsl_node, _xsl_arg1, 0, 2147483647);
      }
      _xsl_arg1.free();
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'font'
// text_body.xsl:65
  private void _xsl_template_font(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    {
      Env _xsl_arg1 = XPath.createCall(env);
      for (Node _xsl_node = node.getFirstChild();
           _xsl_node != null;
           _xsl_node = _xsl_node.getNextSibling()) {
        _xsl_arg1.setSelect(node, null);
        _xsl_arg1.setCurrentNode(_xsl_node);
        applyNode(out, _xsl_node, _xsl_arg1, 0, 2147483647);
      }
      _xsl_arg1.free();
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'br'
// text_body.xsl:68
  private void _xsl_template_br(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    out.print("\n");
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'result'
// text_body.xsl:72
  private void _xsl_template_result(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    if (_exprs[17].evalBoolean(node, env)) {
      out.print("\n");
      out.valueOf(node);
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'diagram'
// text_body.xsl:81
  private void _xsl_template_diagram(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[1]);
    out.print("\n		[]\n");
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'jose-export'
// file:///D:/jose/work/xsl/text.xsl:24
  private void _xsl_template_joseexport0(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[2]);
    {
      com.caucho.xpath.pattern.AbstractPattern _xsl_sel0;
      _xsl_sel0 = _select_patterns[1];
      Node _xsl_cxt0 = env.getContextNode();
      Node _xsl_cur0 = env.getCurrentNode();
      AbstractPattern _xsl_old_sel0 = env.setSelect(node, _xsl_sel0);
      int _xsl_old_size0 = env.setContextSize(0);
      ExprEnvironment _xsl_env0 = env.setExprEnv(null);
      for (Node _xsl_ptr2 = node.getFirstChild();
           _xsl_ptr2 != null;
           _xsl_ptr2 = _xsl_ptr2.getNextSibling()) {
        if (_xsl_ptr2.getNodeName() == "game" &&
            _xsl_ptr2 instanceof Element) {
          Node node1 = node;
          node = _xsl_ptr2;
          env.setCurrentNode(node);
          {
            Env _xsl_arg1 = XPath.createCall(env);
            for (Node _xsl_ptr3 = node.getFirstChild();
                 _xsl_ptr3 != null;
                 _xsl_ptr3 = _xsl_ptr3.getNextSibling()) {
              if (_xsl_ptr3.getNodeName() == "head" &&
                  _xsl_ptr3 instanceof Element) {
                _xsl_arg1.setSelect(node, _select_patterns[2]);
                _xsl_arg1.setCurrentNode(_xsl_ptr3);
                applyNode(out, _xsl_ptr3, _xsl_arg1, 0, 2147483647);
              }
            }
            _xsl_arg1.free();
          }
          {
            Env _xsl_arg1 = XPath.createCall(env);
            for (Node _xsl_ptr4 = node.getFirstChild();
                 _xsl_ptr4 != null;
                 _xsl_ptr4 = _xsl_ptr4.getNextSibling()) {
              if (_xsl_ptr4.getNodeName() == "diagram" &&
                  _xsl_ptr4 instanceof Element) {
                _xsl_arg1.setSelect(node, _select_patterns[3]);
                _xsl_arg1.setCurrentNode(_xsl_ptr4);
                applyNode(out, _xsl_ptr4, _xsl_arg1, 0, 2147483647);
              }
            }
            _xsl_arg1.free();
          }
          out.print("\n");
          {
            Env _xsl_arg1 = XPath.createCall(env);
            for (Node _xsl_ptr5 = node.getFirstChild();
                 _xsl_ptr5 != null;
                 _xsl_ptr5 = _xsl_ptr5.getNextSibling()) {
              if (_xsl_ptr5.getNodeName() == "body" &&
                  _xsl_ptr5 instanceof Element) {
                _xsl_arg1.setSelect(node, _select_patterns[4]);
                _xsl_arg1.setCurrentNode(_xsl_ptr5);
                applyNode(out, _xsl_ptr5, _xsl_arg1, 0, 2147483647);
              }
            }
            _xsl_arg1.free();
          }
          out.print("\n\n");
          node = node1;
          env.setCurrentNode(_xsl_cur0);
        }
      }
      env.setExprEnv(_xsl_env0);
      env.setSelect(_xsl_cxt0, _xsl_old_sel0);
      env.setContextSize(_xsl_old_size0);
    }
    out.print("\n			(created with jose-chess.sourceforge.net)\n			");
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'm'
// file:///D:/jose/work/xsl/text.xsl:47
  private void _xsl_template_m(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[2]);
    {
      Env _xsl_arg1 = XPath.createCall(env);
      for (Node _xsl_node = node.getFirstChild();
           _xsl_node != null;
           _xsl_node = _xsl_node.getNextSibling()) {
        _xsl_arg1.setSelect(node, null);
        _xsl_arg1.setCurrentNode(_xsl_node);
        applyNode(out, _xsl_node, _xsl_arg1, 0, 2147483647);
      }
      _xsl_arg1.free();
    }
    out.print(" ");
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'n'
// file:///D:/jose/work/xsl/text.xsl:54
  private void _xsl_template_n(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[2]);
    {
      Env _xsl_arg1 = XPath.createCall(env);
      _exprs[77].addVar(_xsl_arg1, "f", node, env);
      _xsl_macro_fig(out, node, _xsl_arg1);
      _xsl_arg1.free();
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'b'
// file:///D:/jose/work/xsl/text.xsl:59
  private void _xsl_template_b(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[2]);
    {
      Env _xsl_arg1 = XPath.createCall(env);
      _exprs[78].addVar(_xsl_arg1, "f", node, env);
      _xsl_macro_fig(out, node, _xsl_arg1);
      _xsl_arg1.free();
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'r'
// file:///D:/jose/work/xsl/text.xsl:64
  private void _xsl_template_r(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[2]);
    {
      Env _xsl_arg1 = XPath.createCall(env);
      _exprs[79].addVar(_xsl_arg1, "f", node, env);
      _xsl_macro_fig(out, node, _xsl_arg1);
      _xsl_arg1.free();
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'q'
// file:///D:/jose/work/xsl/text.xsl:69
  private void _xsl_template_q(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[2]);
    {
      Env _xsl_arg1 = XPath.createCall(env);
      _exprs[80].addVar(_xsl_arg1, "f", node, env);
      _xsl_macro_fig(out, node, _xsl_arg1);
      _xsl_arg1.free();
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }


  // 'k'
// file:///D:/jose/work/xsl/text.xsl:74
  private void _xsl_template_k(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    int _xsl_top = env.getTop();
    boolean oldEscaping = out.disableEscaping(false);
    env.setStylesheetEnv(stylesheets[2]);
    {
      Env _xsl_arg1 = XPath.createCall(env);
      _exprs[81].addVar(_xsl_arg1, "f", node, env);
      _xsl_macro_fig(out, node, _xsl_arg1);
      _xsl_arg1.free();
    }
    out.disableEscaping(oldEscaping);
    env.popToTop(_xsl_top);
  }

  void _xsl_macro_fig(XslWriter out, Node inputNode, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    Node node = inputNode;
    _exprs[82].addParam(env, "fig", node, env);
    out.valueOf(_exprs[83].evalObject(node, env));
  }
  protected void applyNode(XslWriter out, Node node, Env env, int _xsl_min, int _xsl_max)
    throws Exception
  {
    Object _xsl_tmp;

    switch (getTemplateId(_static_templates, node, env, _xsl_min, _xsl_max)) {
    case 1:
      _xsl_template_joseexport(out, node, env);
      break;
    case 2:
      _xsl_template_head(out, node, env);
      break;
    case 3:
      _xsl_template_body(out, node, env);
      break;
    case 4:
      _xsl_template_v(out, node, env);
      break;
    case 5:
      _xsl_template_depth(out, node, env);
      break;
    case 6:
      _xsl_template_a(out, node, env);
      break;
    case 7:
      _xsl_template_c(out, node, env);
      break;
    case 8:
      _xsl_template_bold(out, node, env);
      break;
    case 9:
      _xsl_template_italic(out, node, env);
      break;
    case 10:
      _xsl_template_underline(out, node, env);
      break;
    case 11:
      _xsl_template_center(out, node, env);
      break;
    case 12:
      _xsl_template_right(out, node, env);
      break;
    case 13:
      _xsl_template_font(out, node, env);
      break;
    case 14:
      _xsl_template_br(out, node, env);
      break;
    case 15:
      _xsl_template_result(out, node, env);
      break;
    case 16:
      _xsl_template_diagram(out, node, env);
      break;
    case 17:
      _xsl_template_joseexport0(out, node, env);
      break;
    case 18:
      _xsl_template_m(out, node, env);
      break;
    case 19:
      _xsl_template_n(out, node, env);
      break;
    case 20:
      _xsl_template_b(out, node, env);
      break;
    case 21:
      _xsl_template_r(out, node, env);
      break;
    case 22:
      _xsl_template_q(out, node, env);
      break;
    case 23:
      _xsl_template_k(out, node, env);
      break;
    default:
      switch (node.getNodeType()) {
      case Node.ELEMENT_NODE:
      case Node.DOCUMENT_NODE:
      case Node.DOCUMENT_FRAGMENT_NODE:
        env.setSelect(node, null);
        for (Node child = node.getFirstChild();
             child != null;
             child = child.getNextSibling()) {
          env.setCurrentNode(child);
          applyNode(out, child, env, 0, 2147483647);
        }
        break;
      default:
        applyNodeDefault(out, node, env);
        break;
      }
      break;
    }
  }

  static HashMap _static_templates;

  static {
    _static_templates = new HashMap();
    Template []values;
    try {
      Template []star = new Template[] {
      };

      _static_templates.put("*", star);
      _init_templates_0(star);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
  private static void _init_templates_0(Template []star)
    throws Exception
  {
    _static_templates.put("right", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("right").getPattern(), "", 3, 3, 0.0, 11, "_xsl_template_right", 12),
    }));
    _static_templates.put("k", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("k").getPattern(), "", 0, 4, 0.0, 22, "_xsl_template_k", 23),
    }));
    _static_templates.put("r", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("r").getPattern(), "", 0, 4, 0.0, 20, "_xsl_template_r", 21),
    }));
    _static_templates.put("c", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("c").getPattern(), "", 3, 3, 0.0, 6, "_xsl_template_c", 7),
    }));
    _static_templates.put("depth", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("depth").getPattern(), "", 3, 3, 0.0, 4, "_xsl_template_depth", 5),
    }));
    _static_templates.put("q", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("q").getPattern(), "", 0, 4, 0.0, 21, "_xsl_template_q", 22),
    }));
    _static_templates.put("b", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("b").getPattern(), "", 0, 4, 0.0, 19, "_xsl_template_b", 20),
    }));
    _static_templates.put("v", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("v").getPattern(), "", 3, 3, 0.0, 3, "_xsl_template_v", 4),
    }));
    _static_templates.put("font", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("font").getPattern(), "", 3, 3, 0.0, 12, "_xsl_template_font", 13),
    }));
    _static_templates.put("m", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("m").getPattern(), "", 0, 4, 0.0, 17, "_xsl_template_m", 18),
    }));
    _static_templates.put("jose-export", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("jose-export").getPattern(), "", 0, 4, 0.0, 16, "_xsl_template_joseexport0", 17),
        new Template(XPath.parseMatch("jose-export").getPattern(), "", 2, 2, 0.0, 0, "_xsl_template_joseexport", 1),
    }));
    _static_templates.put("a", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("a").getPattern(), "", 3, 3, 0.0, 5, "_xsl_template_a", 6),
    }));
    _static_templates.put("bold", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("bold").getPattern(), "", 3, 3, 0.0, 7, "_xsl_template_bold", 8),
    }));
    _static_templates.put("italic", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("italic").getPattern(), "", 3, 3, 0.0, 8, "_xsl_template_italic", 9),
    }));
    _static_templates.put("result", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("result").getPattern(), "", 3, 3, 0.0, 14, "_xsl_template_result", 15),
    }));
    _static_templates.put("head", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("head").getPattern(), "", 2, 2, 0.0, 1, "_xsl_template_head", 2),
    }));
    _static_templates.put("br", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("br").getPattern(), "", 3, 3, 0.0, 13, "_xsl_template_br", 14),
    }));
    _static_templates.put("underline", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("underline").getPattern(), "", 3, 3, 0.0, 9, "_xsl_template_underline", 10),
    }));
    _static_templates.put("center", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("center").getPattern(), "", 3, 3, 0.0, 10, "_xsl_template_center", 11),
    }));
    _static_templates.put("diagram", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("diagram").getPattern(), "", 3, 3, 0.0, 15, "_xsl_template_diagram", 16),
    }));
    _static_templates.put("n", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("n").getPattern(), "", 0, 4, 0.0, 18, "_xsl_template_n", 19),
    }));
    _static_templates.put("body", 
      mergeTemplates(star, new Template[] {
        new Template(XPath.parseMatch("body").getPattern(), "", 3, 3, 0.0, 2, "_xsl_template_body", 3),
    }));
  }
  private void _xsl_init_vars(XslWriter out, Node node, Env env)
    throws Exception
  {
    out.addNamespace("jose", "http://jose-chess.sourceforge.net/xsl-info");
    Object _xsl_tmp;
    com.caucho.vfs.Path pwd;
    pwd = (com.caucho.vfs.Path) out.getProperty("caucho.pwd");
  }
  protected void _xsl_init(XslWriter out, Node node, Env env)
    throws Exception
  {
    Object _xsl_tmp;
    _xsl_init_vars(out, node, env);
  }
  public boolean isModified()
  {
    return com.caucho.util.CauchoSystem.getVersionId() != -8852640556211195023L ||
           super.isModified();
  }
  public void init(com.caucho.vfs.Path path)
    throws Exception
  {
    super.init(path);
    com.caucho.vfs.Path pwd = path.getParent();
    addDepend(new com.caucho.vfs.Depend(pwd.lookup("/D:/jose/work/xsl/text.xsl"), -7999168233174513687L));
    addDepend(new com.caucho.vfs.Depend(pwd.lookup("/D:/jose/work/xsl/text_header.xsl"), 8684184171826527928L));
    addDepend(new com.caucho.vfs.Depend(pwd.lookup("/D:/jose/work/xsl/text_body.xsl"), -289609950351776243L));
    stylesheets = new StylesheetEnv[3];
    StylesheetEnv env;
    env = new StylesheetEnv();
    stylesheets[0] = env;
    env.setPath(pwd.lookup("text_header.xsl"));
    env = new StylesheetEnv();
    stylesheets[1] = env;
    env.setPath(pwd.lookup("text_body.xsl"));
    env = new StylesheetEnv();
    stylesheets[2] = env;
    env.setPath(pwd.lookup("file:///D:/jose/work/xsl/text.xsl"));
    _output.put("encoding", "UTF-8");
    _output.put("indent", "yes");
    _output.put("method", "text");

    com.caucho.xsl.fun.KeyFun keyFun = new com.caucho.xsl.fun.KeyFun();
    addFunction("key", keyFun);

    com.caucho.xsl.fun.FormatNumberFun formatFun = new com.caucho.xsl.fun.FormatNumberFun();
    java.text.DecimalFormatSymbols symbols;
    addFunction("format-number", formatFun);
  }
  private static Expr []_exprs;
  static {
    try {
      _exprs = new Expr[] { 
        XPath.parseExpr("((((($isEvent or $isEventDate) or $isSite) or $isDate) or $isRound) or $isBoard)"),
        XPath.parseExpr("$isEvent"),
        XPath.parseExpr("$isEventDate"),
        XPath.parseExpr("((($isSite or $isDate) or $isRound) or $isBoard)"),
        XPath.parseExpr("$isSite"),
        XPath.parseExpr("$isDate"),
        XPath.parseExpr("($isRound or $isBoard)"),
        XPath.parseExpr("$isRound"),
        XPath.parseExpr("$isBoard"),
        XPath.parseExpr("(((((($isWhiteTitle or $isWhite) or $isWhiteELO) or $isBlackTitle) or $isBlack) or $isBlackELO) or $isResult)"),
        XPath.parseExpr("(($isWhiteTitle or $isWhite) or $isWhiteELO)"),
        XPath.parseExpr("$isWhiteELO"),
        XPath.parseExpr("(($isBlackTitle or $isBlack) or $isBlackELO)"),
        XPath.parseExpr("$isBlackELO"),
        XPath.parseExpr("$isResult"),
        XPath.parseExpr("($isECO or $isOpening)"),
        XPath.parseExpr("$isAnnotator"),
        XPath.parseExpr("(. != '*')"),
        XPath.parseExpr("."),
        XPath.parseExpr("($head)/tag[(key = 'Event')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'EventDate')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'Site')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'Date')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'Round')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'Board')]/value"),
        XPath.parseExpr("((string-length($Event) > 0.0) and ($Event != '-'))"),
        XPath.parseExpr("((string-length($EventDate) > 0.0) and ($EventDate != '-'))"),
        XPath.parseExpr("((string-length($Site) > 0.0) and ($Site != '-'))"),
        XPath.parseExpr("((string-length($Date) > 0.0) and ($Date != '-'))"),
        XPath.parseExpr("((string-length($Round) > 0.0) and ($Round != '-'))"),
        XPath.parseExpr("((string-length($Board) > 0.0) and ($Board != '-'))"),
        XPath.parseExpr("$Event"),
        XPath.parseExpr("$EventDate"),
        XPath.parseExpr("$Site"),
        XPath.parseExpr("$Date"),
        XPath.parseExpr("($head)/tag[(key = 'Round')]/text"),
        XPath.parseExpr("$Round"),
        XPath.parseExpr("($head)/tag[(key = 'Board')]/text"),
        XPath.parseExpr("$Board"),
        XPath.parseExpr("($head)/tag[(key = 'White')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'WhiteTitle')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'WhiteELO')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'Black')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'BlackTitle')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'BlackELO')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'Result')]/value"),
        XPath.parseExpr("((string-length($White) > 0.0) and ($White != '-'))"),
        XPath.parseExpr("((string-length($WhiteTitle) > 0.0) and ($WhiteTitle != '-'))"),
        XPath.parseExpr("((string-length($WhiteELO) > 0.0) and ($WhiteELO != '-'))"),
        XPath.parseExpr("((string-length($Black) > 0.0) and ($Black != '-'))"),
        XPath.parseExpr("((string-length($BlackTitle) > 0.0) and ($BlackTitle != '-'))"),
        XPath.parseExpr("((string-length($BlackELO) > 0.0) and ($BlackELO != '-'))"),
        XPath.parseExpr("(((string-length($Result) > 0.0) and ($Result != '-')) and ($Result != '*'))"),
        XPath.parseExpr("$WhiteTitle"),
        XPath.parseExpr("$White"),
        XPath.parseExpr("$WhiteELO"),
        XPath.parseExpr("$BlackTitle"),
        XPath.parseExpr("$Black"),
        XPath.parseExpr("$BlackELO"),
        XPath.parseExpr("$Result"),
        XPath.parseExpr("($head)/tag[(key = 'ECO')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'Opening')]/value"),
        XPath.parseExpr("($head)/tag[(key = 'Annotator')]/value"),
        XPath.parseExpr("((string-length($ECO) > 0.0) and ($ECO != '-'))"),
        XPath.parseExpr("((string-length($Opening) > 0.0) and ($Opening != '-'))"),
        XPath.parseExpr("((string-length($Annotator) > 0.0) and ($Annotator != '-'))"),
        XPath.parseExpr("$ECO"),
        XPath.parseExpr("$Opening"),
        XPath.parseExpr("($head)/tag[(key = 'Annotator')]/text"),
        XPath.parseExpr("$Annotator"),
        XPath.parseExpr("concat('body.line.', depth)"),
        XPath.parseExpr("/descendant::style[(name = $style)]/a[(key = 'variation.prefix')]/value"),
        XPath.parseExpr("/descendant::style[(name = $style)]/a[(key = 'variation.suffix')]/value"),
        XPath.parseExpr("/descendant::style[(name = $style)]/a[(key = 'variation.newline')]/value"),
        XPath.parseExpr("($newline = 'true')"),
        XPath.parseExpr("$prefix"),
        XPath.parseExpr("$suffix"),
        XPath.parseExpr("'n'"),
        XPath.parseExpr("'b'"),
        XPath.parseExpr("'r'"),
        XPath.parseExpr("'q'"),
        XPath.parseExpr("'k'"),
        XPath.parseExpr("/descendant::figurines/text"),
        XPath.parseExpr("($fig)/string[(key = $f)]/value"),
      };
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
  private static com.caucho.xpath.pattern.AbstractPattern []_select_patterns;
  private static com.caucho.xpath.pattern.AbstractPattern []_match_patterns;
  static {
    try {
      _select_patterns = new com.caucho.xpath.pattern.AbstractPattern[] { 
        XPath.parseSelect("game/head").getPattern(),
        XPath.parseSelect("game").getPattern(),
        XPath.parseSelect("head").getPattern(),
        XPath.parseSelect("diagram").getPattern(),
        XPath.parseSelect("body").getPattern(),
      };
      _match_patterns = new com.caucho.xpath.pattern.AbstractPattern[] { 
      };
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}
