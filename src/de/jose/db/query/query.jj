/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. query.jj */
/*@egen*/

options{
    IGNORE_CASE=true ;
    UNICODE_INPUT=false ;
    STATIC=false ;
//  DEBUG_LOOKAHEAD= true ;
//	USER_TOKEN_MANAGER = false ;
}

PARSER_BEGIN(Query)

package de.jose.db.query;
import java.io.*;

public class Query/*@bgen(jjtree)*/implements QueryTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTQueryState jjtree = new JJTQueryState();

/*@egen*/

	public Query(String stream) 
	{
		this(new LanguageTokenManager(stream));
	}

	public SimpleNode getResult()
	{
		return (SimpleNode)jjtree.rootNode();
	}

    public static void main( String args[] )
        throws ParseException, IOException
    {
		java.io.BufferedReader in = new java.io.BufferedReader(new java.io.InputStreamReader(System.in));
        File dir = new File(".");
		String lang = "de";
        
        for (int i=0; i<args.length; i++)
			if (args[i].equalsIgnoreCase("-wd"))
				dir = new File(args[++i]);
			else
				lang = args[i];
				
        de.jose.Language.setLanguage(dir, lang);
		
		for (;;)
		{
			String line = in.readLine();
			if (line==null) break;
			line = line.trim();
			if (line.length()==0) break;

			Query q = new Query(line);
			q.CompilationUnit() ;
			ASTCompilationUnit root = (ASTCompilationUnit)q.getResult();
			
			de.jose.db.ParamStatement stm = new de.jose.db.ParamStatement();
			root.appendSQL(stm,0);
			
			root.dump("");
			System.out.println(stm.where.toString());
		}
    } // main ends here

	//	the following methods will record the token sequence for each node
	void jjtreeOpenNodeScope(Node n)
    {
      ((SimpleNode)n).firstToken = getToken(1);
    }

    void jjtreeCloseNodeScope(Node n)
    {
      ((SimpleNode)n).lastToken = getToken(0);
    }
    
}

PARSER_END(Query)

SKIP:
{
    " "
|   "\t"
|   "\r"
|   "\n"
}

TOKEN: 
{
    <AND: "AND">
|   <OR: "OR">
|   <NOT: "NOT">
|	<SAND: "&">
|	<SOR: "|">
|	<SNOT: "!">
|	<LPAREN: "(">
|	<RPAREN: ")">
|	<VERSUS: "VERSUS">
|	<SVERSUS: "-">
|	<WHITE: "WHITE">
|	<BLACK: "BLACK">
|	<AS: "AS">
|	<WINS: "WINS">
|	<LOSES: "LOSES">
|	<DRAWS: "DRAWS">
|	<WIN: "WIN">
|	<LOSE: "LOSE">
|	<DRAW: "DRAW">
|	<DOES: "DOES">
|	<SWIN: "1-0">
|	<SLOSE: "0-1">
|	<SDRAW: "1/2">
|	<SUNKNOWN: "*">
}

TOKEN:
{
	<PLAYER: "PLAYER">
|	<EVENT: "EVENT">
|	<SITE: "SITE">
|	<DATE: "DATE">
|	<OPENING: "OPENING">
|	<ECO: "ECO">
|	<ELO: "ELO">
|	<TITLE: "TITLE">
|	<RESULT: "RESULT">
}

TOKEN:
{
	<EQ: "=">
|	<NEQ: "!=">
|	<LT: "<">
|	<GT: ">">
|	<LTE: "<=">
|	<GTE: ">=">
|	<SEQ: "~=">
}

TOKEN:
{
	< VALUE: ( <LETTER> )+ >
| 	< #LETTER: ~[" ","\n","\r","\t","\""] >
|   < QUOTED_VALUE: "\"" (~["\n","\r","\""])* "\"" >
}

void CompilationUnit():
{/*@bgen(jjtree) CompilationUnit */
  ASTCompilationUnit jjtn000 = new ASTCompilationUnit(JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CompilationUnit */
        try {
/*@egen*/
	Expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void Expression():
{/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
        try {
/*@egen*/
	OrExpression() (("OR"|"|") OrExpression())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void OrExpression():
{/*@bgen(jjtree) OrExpression */
  ASTOrExpression jjtn000 = new ASTOrExpression(JJTOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrExpression */
        try {
/*@egen*/
	AndExpression() (("AND"|"&") AndExpression())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void  AndExpression(): 
{/*@bgen(jjtree) AndExpression */
  ASTAndExpression jjtn000 = new ASTAndExpression(JJTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AndExpression */
        try {
/*@egen*/
	VersusExpression() [("VERSUS"|"-") VersusExpression()]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/	
}

void VersusExpression():
{/*@bgen(jjtree) VersusExpression */
  ASTVersusExpression jjtn000 = new ASTVersusExpression(JJTVERSUSEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VersusExpression */
                try {
/*@egen*/
		CastExpression()
	|	NegatedExpression()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtreeCloseNodeScope(jjtn000);
                  }
                }
/*@egen*/
}

void NegatedExpression():
{/*@bgen(jjtree) NegatedExpression */
  ASTNegatedExpression jjtn000 = new ASTNegatedExpression(JJTNEGATEDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NegatedExpression */
        try {
/*@egen*/
	("NOT"|"!") CastExpression()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void CastExpression():
{/*@bgen(jjtree) CastExpression */
  ASTCastExpression jjtn000 = new ASTCastExpression(JJTCASTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) CastExpression */
                try {
/*@egen*/
		( Color() (SimpleExpression())+ )
	|	( (SimpleExpression())+ ["AS" Color()] )/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtreeCloseNodeScope(jjtn000);
                  }
                }
/*@egen*/
}

void Color():
{/*@bgen(jjtree) Color */
  ASTColor jjtn000 = new ASTColor(JJTCOLOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Color */
        try {
/*@egen*/
	("WHITE"|"BLACK")/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void SimpleExpression():
{/*@bgen(jjtree) SimpleExpression */
  ASTSimpleExpression jjtn000 = new ASTSimpleExpression(JJTSIMPLEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SimpleExpression */
                try {
/*@egen*/
		("(" Expression() ")")
	|	LOOKAHEAD(3) ColorDependentExpression()		/*	LOOKAHEAD(3) needed to detect DOES NOT WIN	*/
	|	LOOKAHEAD(3) ColorIndependentExpression()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtreeCloseNodeScope(jjtn000);
                  }
                }
/*@egen*/
}

void ColorDependentExpression():
{/*@bgen(jjtree) ColorDependentExpression */
  ASTColorDependentExpression jjtn000 = new ASTColorDependentExpression(JJTCOLORDEPENDENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ColorDependentExpression */
                try {
/*@egen*/	
		ColorDependentFieldExpression()
	|	ColorDependentResultExpression()
	|	PlayerExpression()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtreeCloseNodeScope(jjtn000);
                  }
                }
/*@egen*/
}

void PlayerExpression():
{/*@bgen(jjtree) PlayerExpression */
  ASTPlayerExpression jjtn000 = new ASTPlayerExpression(JJTPLAYEREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PlayerExpression */
        try {
/*@egen*/
	["PLAYER" [Operator()]] Value()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void ColorDependentFieldExpression():
{/*@bgen(jjtree) ColorDependentFieldExpression */
  ASTColorDependentFieldExpression jjtn000 = new ASTColorDependentFieldExpression(JJTCOLORDEPENDENTFIELDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ColorDependentFieldExpression */
        try {
/*@egen*/
	("TITLE" | "ELO") [Operator()] Value()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void ColorDependentResultExpression():
{/*@bgen(jjtree) ColorDependentResultExpression */
  ASTColorDependentResultExpression jjtn000 = new ASTColorDependentResultExpression(JJTCOLORDEPENDENTRESULTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ColorDependentResultExpression */
                try {
/*@egen*/
		("WINS")
	|	("LOSES")
	|	LOOKAHEAD(3) ("DOES" "NOT" "WIN")
	|	LOOKAHEAD(3) ("DOES" "NOT" "LOSE")/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtreeCloseNodeScope(jjtn000);
                  }
                }
/*@egen*/
}

void ColorIndependentExpression():
{/*@bgen(jjtree) ColorIndependentExpression */
  ASTColorIndependentExpression jjtn000 = new ASTColorIndependentExpression(JJTCOLORINDEPENDENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ColorIndependentExpression */
                try {
/*@egen*/
		ColorIndependentFieldExpression()
	|	ColorIndependentResultExpression()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtreeCloseNodeScope(jjtn000);
                  }
                }
/*@egen*/
}

void ColorIndependentFieldExpression():
{/*@bgen(jjtree) ColorIndependentFieldExpression */
  ASTColorIndependentFieldExpression jjtn000 = new ASTColorIndependentFieldExpression(JJTCOLORINDEPENDENTFIELDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ColorIndependentFieldExpression */
        try {
/*@egen*/
	("EVENT" | "SITE" | "OPENING" | "ECO" | "DATE") [Operator()] Value()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void ColorIndependentResultExpression():
{/*@bgen(jjtree) ColorIndependentResultExpression */
  ASTColorIndependentResultExpression jjtn000 = new ASTColorIndependentResultExpression(JJTCOLORINDEPENDENTRESULTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ColorIndependentResultExpression */
                try {
/*@egen*/
		("DRAWS")
	|	(["DOES" "NOT"] "DRAW")
	|	(["RESULT" [Operator()]] ResultValue())/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtreeCloseNodeScope(jjtn000);
                  }
                }
/*@egen*/
}

void Operator():
{/*@bgen(jjtree) Operator */
  ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Operator */
        try {
/*@egen*/
	("=" | "!=" | "<" | ">" | "<=" | ">=" | "~=")/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void Value():
{/*@bgen(jjtree) Value */
  ASTValue jjtn000 = new ASTValue(JJTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Value */
        try {
/*@egen*/
	( <VALUE> | <QUOTED_VALUE> )/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}

void ResultValue():
{/*@bgen(jjtree) ResultValue */
  ASTResultValue jjtn000 = new ASTResultValue(JJTRESULTVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ResultValue */
        try {
/*@egen*/
	("1-0" | "1/2" | "0-1" | "*")/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtreeCloseNodeScope(jjtn000);
          }
        }
/*@egen*/
}